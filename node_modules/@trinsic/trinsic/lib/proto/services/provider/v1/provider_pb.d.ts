// package: services.provider.v1
// file: services/provider/v1/provider.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as services_common_v1_common_pb from "../../../services/common/v1/common_pb";
import * as services_account_v1_account_pb from "../../../services/account/v1/account_pb";

export class Invite extends jspb.Message { 
    getId(): string;
    setId(value: string): Invite;
    getCode(): string;
    setCode(value: string): Invite;
    getCreated(): string;
    setCreated(value: string): Invite;
    getAccepted(): string;
    setAccepted(value: string): Invite;
    getExpires(): string;
    setExpires(value: string): Invite;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Invite.AsObject;
    static toObject(includeInstance: boolean, msg: Invite): Invite.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Invite, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Invite;
    static deserializeBinaryFromReader(message: Invite, reader: jspb.BinaryReader): Invite;
}

export namespace Invite {
    export type AsObject = {
        id: string,
        code: string,
        created: string,
        accepted: string,
        expires: string,
    }
}

export class InviteRequest extends jspb.Message { 
    getParticipant(): ParticipantType;
    setParticipant(value: ParticipantType): InviteRequest;
    getDescription(): string;
    setDescription(value: string): InviteRequest;

    hasDetails(): boolean;
    clearDetails(): void;
    getDetails(): services_account_v1_account_pb.AccountDetails | undefined;
    setDetails(value?: services_account_v1_account_pb.AccountDetails): InviteRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InviteRequest.AsObject;
    static toObject(includeInstance: boolean, msg: InviteRequest): InviteRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InviteRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InviteRequest;
    static deserializeBinaryFromReader(message: InviteRequest, reader: jspb.BinaryReader): InviteRequest;
}

export namespace InviteRequest {
    export type AsObject = {
        participant: ParticipantType,
        description: string,
        details?: services_account_v1_account_pb.AccountDetails.AsObject,
    }


    export class DidCommInvitation extends jspb.Message { 

        serializeBinary(): Uint8Array;
        toObject(includeInstance?: boolean): DidCommInvitation.AsObject;
        static toObject(includeInstance: boolean, msg: DidCommInvitation): DidCommInvitation.AsObject;
        static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
        static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
        static serializeBinaryToWriter(message: DidCommInvitation, writer: jspb.BinaryWriter): void;
        static deserializeBinary(bytes: Uint8Array): DidCommInvitation;
        static deserializeBinaryFromReader(message: DidCommInvitation, reader: jspb.BinaryReader): DidCommInvitation;
    }

    export namespace DidCommInvitation {
        export type AsObject = {
        }
    }

}

export class InviteResponse extends jspb.Message { 
    getStatus(): services_common_v1_common_pb.ResponseStatus;
    setStatus(value: services_common_v1_common_pb.ResponseStatus): InviteResponse;
    getInvitationId(): string;
    setInvitationId(value: string): InviteResponse;
    getInvitationCode(): string;
    setInvitationCode(value: string): InviteResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InviteResponse.AsObject;
    static toObject(includeInstance: boolean, msg: InviteResponse): InviteResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InviteResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InviteResponse;
    static deserializeBinaryFromReader(message: InviteResponse, reader: jspb.BinaryReader): InviteResponse;
}

export namespace InviteResponse {
    export type AsObject = {
        status: services_common_v1_common_pb.ResponseStatus,
        invitationId: string,
        invitationCode: string,
    }
}

export class InvitationStatusRequest extends jspb.Message { 
    getInvitationId(): string;
    setInvitationId(value: string): InvitationStatusRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InvitationStatusRequest.AsObject;
    static toObject(includeInstance: boolean, msg: InvitationStatusRequest): InvitationStatusRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InvitationStatusRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InvitationStatusRequest;
    static deserializeBinaryFromReader(message: InvitationStatusRequest, reader: jspb.BinaryReader): InvitationStatusRequest;
}

export namespace InvitationStatusRequest {
    export type AsObject = {
        invitationId: string,
    }
}

export class InvitationStatusResponse extends jspb.Message { 
    getStatus(): InvitationStatusResponse.Status;
    setStatus(value: InvitationStatusResponse.Status): InvitationStatusResponse;
    getStatusDetails(): string;
    setStatusDetails(value: string): InvitationStatusResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InvitationStatusResponse.AsObject;
    static toObject(includeInstance: boolean, msg: InvitationStatusResponse): InvitationStatusResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InvitationStatusResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InvitationStatusResponse;
    static deserializeBinaryFromReader(message: InvitationStatusResponse, reader: jspb.BinaryReader): InvitationStatusResponse;
}

export namespace InvitationStatusResponse {
    export type AsObject = {
        status: InvitationStatusResponse.Status,
        statusDetails: string,
    }

    export enum Status {
    ERROR = 0,
    INVITATIONSENT = 1,
    COMPLETED = 2,
    EXPIRED = 3,
    }

}

export class Ecosystem extends jspb.Message { 
    getId(): string;
    setId(value: string): Ecosystem;
    getName(): string;
    setName(value: string): Ecosystem;
    getDescription(): string;
    setDescription(value: string): Ecosystem;
    getUri(): string;
    setUri(value: string): Ecosystem;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Ecosystem.AsObject;
    static toObject(includeInstance: boolean, msg: Ecosystem): Ecosystem.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Ecosystem, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Ecosystem;
    static deserializeBinaryFromReader(message: Ecosystem, reader: jspb.BinaryReader): Ecosystem;
}

export namespace Ecosystem {
    export type AsObject = {
        id: string,
        name: string,
        description: string,
        uri: string,
    }
}

export class CreateEcosystemRequest extends jspb.Message { 
    getName(): string;
    setName(value: string): CreateEcosystemRequest;
    getDescription(): string;
    setDescription(value: string): CreateEcosystemRequest;
    getUri(): string;
    setUri(value: string): CreateEcosystemRequest;

    hasDetails(): boolean;
    clearDetails(): void;
    getDetails(): services_account_v1_account_pb.AccountDetails | undefined;
    setDetails(value?: services_account_v1_account_pb.AccountDetails): CreateEcosystemRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateEcosystemRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateEcosystemRequest): CreateEcosystemRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateEcosystemRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateEcosystemRequest;
    static deserializeBinaryFromReader(message: CreateEcosystemRequest, reader: jspb.BinaryReader): CreateEcosystemRequest;
}

export namespace CreateEcosystemRequest {
    export type AsObject = {
        name: string,
        description: string,
        uri: string,
        details?: services_account_v1_account_pb.AccountDetails.AsObject,
    }
}

export class CreateEcosystemResponse extends jspb.Message { 

    hasEcosystem(): boolean;
    clearEcosystem(): void;
    getEcosystem(): Ecosystem | undefined;
    setEcosystem(value?: Ecosystem): CreateEcosystemResponse;

    hasProfile(): boolean;
    clearProfile(): void;
    getProfile(): services_account_v1_account_pb.AccountProfile | undefined;
    setProfile(value?: services_account_v1_account_pb.AccountProfile): CreateEcosystemResponse;
    getConfirmationMethod(): services_account_v1_account_pb.ConfirmationMethod;
    setConfirmationMethod(value: services_account_v1_account_pb.ConfirmationMethod): CreateEcosystemResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateEcosystemResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateEcosystemResponse): CreateEcosystemResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateEcosystemResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateEcosystemResponse;
    static deserializeBinaryFromReader(message: CreateEcosystemResponse, reader: jspb.BinaryReader): CreateEcosystemResponse;
}

export namespace CreateEcosystemResponse {
    export type AsObject = {
        ecosystem?: Ecosystem.AsObject,
        profile?: services_account_v1_account_pb.AccountProfile.AsObject,
        confirmationMethod: services_account_v1_account_pb.ConfirmationMethod,
    }
}

export class GenerateTokenRequest extends jspb.Message { 
    getDescription(): string;
    setDescription(value: string): GenerateTokenRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GenerateTokenRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GenerateTokenRequest): GenerateTokenRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GenerateTokenRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GenerateTokenRequest;
    static deserializeBinaryFromReader(message: GenerateTokenRequest, reader: jspb.BinaryReader): GenerateTokenRequest;
}

export namespace GenerateTokenRequest {
    export type AsObject = {
        description: string,
    }
}

export class GenerateTokenResponse extends jspb.Message { 

    hasProfile(): boolean;
    clearProfile(): void;
    getProfile(): services_account_v1_account_pb.AccountProfile | undefined;
    setProfile(value?: services_account_v1_account_pb.AccountProfile): GenerateTokenResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GenerateTokenResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GenerateTokenResponse): GenerateTokenResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GenerateTokenResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GenerateTokenResponse;
    static deserializeBinaryFromReader(message: GenerateTokenResponse, reader: jspb.BinaryReader): GenerateTokenResponse;
}

export namespace GenerateTokenResponse {
    export type AsObject = {
        profile?: services_account_v1_account_pb.AccountProfile.AsObject,
    }
}

export enum ParticipantType {
    PARTICIPANT_TYPE_INDIVIDUAL = 0,
    PARTICIPANT_TYPE_ORGANIZATION = 1,
}
