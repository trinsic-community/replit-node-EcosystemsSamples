// GENERATED CODE -- DO NOT EDIT!

'use strict';
var grpc = require('@grpc/grpc-js');
var services_verifiable$credentials_v1_verifiable$credentials_pb = require('../../../services/verifiable-credentials/v1/verifiable-credentials_pb.js');
var services_common_v1_common_pb = require('../../../services/common/v1/common_pb.js');

function serialize_services_verifiablecredentials_v1_CheckStatusRequest(arg) {
  if (!(arg instanceof services_verifiable$credentials_v1_verifiable$credentials_pb.CheckStatusRequest)) {
    throw new Error('Expected argument of type services.verifiablecredentials.v1.CheckStatusRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_verifiablecredentials_v1_CheckStatusRequest(buffer_arg) {
  return services_verifiable$credentials_v1_verifiable$credentials_pb.CheckStatusRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_verifiablecredentials_v1_CheckStatusResponse(arg) {
  if (!(arg instanceof services_verifiable$credentials_v1_verifiable$credentials_pb.CheckStatusResponse)) {
    throw new Error('Expected argument of type services.verifiablecredentials.v1.CheckStatusResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_verifiablecredentials_v1_CheckStatusResponse(buffer_arg) {
  return services_verifiable$credentials_v1_verifiable$credentials_pb.CheckStatusResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_verifiablecredentials_v1_CreateProofRequest(arg) {
  if (!(arg instanceof services_verifiable$credentials_v1_verifiable$credentials_pb.CreateProofRequest)) {
    throw new Error('Expected argument of type services.verifiablecredentials.v1.CreateProofRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_verifiablecredentials_v1_CreateProofRequest(buffer_arg) {
  return services_verifiable$credentials_v1_verifiable$credentials_pb.CreateProofRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_verifiablecredentials_v1_CreateProofResponse(arg) {
  if (!(arg instanceof services_verifiable$credentials_v1_verifiable$credentials_pb.CreateProofResponse)) {
    throw new Error('Expected argument of type services.verifiablecredentials.v1.CreateProofResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_verifiablecredentials_v1_CreateProofResponse(buffer_arg) {
  return services_verifiable$credentials_v1_verifiable$credentials_pb.CreateProofResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_verifiablecredentials_v1_IssueFromTemplateRequest(arg) {
  if (!(arg instanceof services_verifiable$credentials_v1_verifiable$credentials_pb.IssueFromTemplateRequest)) {
    throw new Error('Expected argument of type services.verifiablecredentials.v1.IssueFromTemplateRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_verifiablecredentials_v1_IssueFromTemplateRequest(buffer_arg) {
  return services_verifiable$credentials_v1_verifiable$credentials_pb.IssueFromTemplateRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_verifiablecredentials_v1_IssueFromTemplateResponse(arg) {
  if (!(arg instanceof services_verifiable$credentials_v1_verifiable$credentials_pb.IssueFromTemplateResponse)) {
    throw new Error('Expected argument of type services.verifiablecredentials.v1.IssueFromTemplateResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_verifiablecredentials_v1_IssueFromTemplateResponse(buffer_arg) {
  return services_verifiable$credentials_v1_verifiable$credentials_pb.IssueFromTemplateResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_verifiablecredentials_v1_IssueRequest(arg) {
  if (!(arg instanceof services_verifiable$credentials_v1_verifiable$credentials_pb.IssueRequest)) {
    throw new Error('Expected argument of type services.verifiablecredentials.v1.IssueRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_verifiablecredentials_v1_IssueRequest(buffer_arg) {
  return services_verifiable$credentials_v1_verifiable$credentials_pb.IssueRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_verifiablecredentials_v1_IssueResponse(arg) {
  if (!(arg instanceof services_verifiable$credentials_v1_verifiable$credentials_pb.IssueResponse)) {
    throw new Error('Expected argument of type services.verifiablecredentials.v1.IssueResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_verifiablecredentials_v1_IssueResponse(buffer_arg) {
  return services_verifiable$credentials_v1_verifiable$credentials_pb.IssueResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_verifiablecredentials_v1_SendRequest(arg) {
  if (!(arg instanceof services_verifiable$credentials_v1_verifiable$credentials_pb.SendRequest)) {
    throw new Error('Expected argument of type services.verifiablecredentials.v1.SendRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_verifiablecredentials_v1_SendRequest(buffer_arg) {
  return services_verifiable$credentials_v1_verifiable$credentials_pb.SendRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_verifiablecredentials_v1_SendResponse(arg) {
  if (!(arg instanceof services_verifiable$credentials_v1_verifiable$credentials_pb.SendResponse)) {
    throw new Error('Expected argument of type services.verifiablecredentials.v1.SendResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_verifiablecredentials_v1_SendResponse(buffer_arg) {
  return services_verifiable$credentials_v1_verifiable$credentials_pb.SendResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_verifiablecredentials_v1_UpdateStatusRequest(arg) {
  if (!(arg instanceof services_verifiable$credentials_v1_verifiable$credentials_pb.UpdateStatusRequest)) {
    throw new Error('Expected argument of type services.verifiablecredentials.v1.UpdateStatusRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_verifiablecredentials_v1_UpdateStatusRequest(buffer_arg) {
  return services_verifiable$credentials_v1_verifiable$credentials_pb.UpdateStatusRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_verifiablecredentials_v1_UpdateStatusResponse(arg) {
  if (!(arg instanceof services_verifiable$credentials_v1_verifiable$credentials_pb.UpdateStatusResponse)) {
    throw new Error('Expected argument of type services.verifiablecredentials.v1.UpdateStatusResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_verifiablecredentials_v1_UpdateStatusResponse(buffer_arg) {
  return services_verifiable$credentials_v1_verifiable$credentials_pb.UpdateStatusResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_verifiablecredentials_v1_VerifyProofRequest(arg) {
  if (!(arg instanceof services_verifiable$credentials_v1_verifiable$credentials_pb.VerifyProofRequest)) {
    throw new Error('Expected argument of type services.verifiablecredentials.v1.VerifyProofRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_verifiablecredentials_v1_VerifyProofRequest(buffer_arg) {
  return services_verifiable$credentials_v1_verifiable$credentials_pb.VerifyProofRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_verifiablecredentials_v1_VerifyProofResponse(arg) {
  if (!(arg instanceof services_verifiable$credentials_v1_verifiable$credentials_pb.VerifyProofResponse)) {
    throw new Error('Expected argument of type services.verifiablecredentials.v1.VerifyProofResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_verifiablecredentials_v1_VerifyProofResponse(buffer_arg) {
  return services_verifiable$credentials_v1_verifiable$credentials_pb.VerifyProofResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


var VerifiableCredentialService = exports.VerifiableCredentialService = {
  // Sign and issue a verifiable credential from a submitted document.
// The document must be a valid JSON-LD document.
issue: {
    path: '/services.verifiablecredentials.v1.VerifiableCredential/Issue',
    requestStream: false,
    responseStream: false,
    requestType: services_verifiable$credentials_v1_verifiable$credentials_pb.IssueRequest,
    responseType: services_verifiable$credentials_v1_verifiable$credentials_pb.IssueResponse,
    requestSerialize: serialize_services_verifiablecredentials_v1_IssueRequest,
    requestDeserialize: deserialize_services_verifiablecredentials_v1_IssueRequest,
    responseSerialize: serialize_services_verifiablecredentials_v1_IssueResponse,
    responseDeserialize: deserialize_services_verifiablecredentials_v1_IssueResponse,
  },
  // Sign and issue a verifiable credential from a pre-defined template.
// This process will also add schema validation and 
// revocation registry entry in the credential.
issueFromTemplate: {
    path: '/services.verifiablecredentials.v1.VerifiableCredential/IssueFromTemplate',
    requestStream: false,
    responseStream: false,
    requestType: services_verifiable$credentials_v1_verifiable$credentials_pb.IssueFromTemplateRequest,
    responseType: services_verifiable$credentials_v1_verifiable$credentials_pb.IssueFromTemplateResponse,
    requestSerialize: serialize_services_verifiablecredentials_v1_IssueFromTemplateRequest,
    requestDeserialize: deserialize_services_verifiablecredentials_v1_IssueFromTemplateRequest,
    responseSerialize: serialize_services_verifiablecredentials_v1_IssueFromTemplateResponse,
    responseDeserialize: deserialize_services_verifiablecredentials_v1_IssueFromTemplateResponse,
  },
  // Check credential status by setting the revocation value
checkStatus: {
    path: '/services.verifiablecredentials.v1.VerifiableCredential/CheckStatus',
    requestStream: false,
    responseStream: false,
    requestType: services_verifiable$credentials_v1_verifiable$credentials_pb.CheckStatusRequest,
    responseType: services_verifiable$credentials_v1_verifiable$credentials_pb.CheckStatusResponse,
    requestSerialize: serialize_services_verifiablecredentials_v1_CheckStatusRequest,
    requestDeserialize: deserialize_services_verifiablecredentials_v1_CheckStatusRequest,
    responseSerialize: serialize_services_verifiablecredentials_v1_CheckStatusResponse,
    responseDeserialize: deserialize_services_verifiablecredentials_v1_CheckStatusResponse,
  },
  // Update credential status by setting the revocation value
updateStatus: {
    path: '/services.verifiablecredentials.v1.VerifiableCredential/UpdateStatus',
    requestStream: false,
    responseStream: false,
    requestType: services_verifiable$credentials_v1_verifiable$credentials_pb.UpdateStatusRequest,
    responseType: services_verifiable$credentials_v1_verifiable$credentials_pb.UpdateStatusResponse,
    requestSerialize: serialize_services_verifiablecredentials_v1_UpdateStatusRequest,
    requestDeserialize: deserialize_services_verifiablecredentials_v1_UpdateStatusRequest,
    responseSerialize: serialize_services_verifiablecredentials_v1_UpdateStatusResponse,
    responseDeserialize: deserialize_services_verifiablecredentials_v1_UpdateStatusResponse,
  },
  // Create a proof from a signed document that is a valid
// verifiable credential and contains a signature from which a proof can be derived.
createProof: {
    path: '/services.verifiablecredentials.v1.VerifiableCredential/CreateProof',
    requestStream: false,
    responseStream: false,
    requestType: services_verifiable$credentials_v1_verifiable$credentials_pb.CreateProofRequest,
    responseType: services_verifiable$credentials_v1_verifiable$credentials_pb.CreateProofResponse,
    requestSerialize: serialize_services_verifiablecredentials_v1_CreateProofRequest,
    requestDeserialize: deserialize_services_verifiablecredentials_v1_CreateProofRequest,
    responseSerialize: serialize_services_verifiablecredentials_v1_CreateProofResponse,
    responseDeserialize: deserialize_services_verifiablecredentials_v1_CreateProofResponse,
  },
  // Verifies a proof by checking the signature value, and if possible schema validation,
// revocation status, and issuer status against a trust registry
verifyProof: {
    path: '/services.verifiablecredentials.v1.VerifiableCredential/VerifyProof',
    requestStream: false,
    responseStream: false,
    requestType: services_verifiable$credentials_v1_verifiable$credentials_pb.VerifyProofRequest,
    responseType: services_verifiable$credentials_v1_verifiable$credentials_pb.VerifyProofResponse,
    requestSerialize: serialize_services_verifiablecredentials_v1_VerifyProofRequest,
    requestDeserialize: deserialize_services_verifiablecredentials_v1_VerifyProofRequest,
    responseSerialize: serialize_services_verifiablecredentials_v1_VerifyProofResponse,
    responseDeserialize: deserialize_services_verifiablecredentials_v1_VerifyProofResponse,
  },
  // Sends a document directly to a user's email within the given ecosystem
send: {
    path: '/services.verifiablecredentials.v1.VerifiableCredential/Send',
    requestStream: false,
    responseStream: false,
    requestType: services_verifiable$credentials_v1_verifiable$credentials_pb.SendRequest,
    responseType: services_verifiable$credentials_v1_verifiable$credentials_pb.SendResponse,
    requestSerialize: serialize_services_verifiablecredentials_v1_SendRequest,
    requestDeserialize: deserialize_services_verifiablecredentials_v1_SendRequest,
    responseSerialize: serialize_services_verifiablecredentials_v1_SendResponse,
    responseDeserialize: deserialize_services_verifiablecredentials_v1_SendResponse,
  },
};

exports.VerifiableCredentialClient = grpc.makeGenericClientConstructor(VerifiableCredentialService);
