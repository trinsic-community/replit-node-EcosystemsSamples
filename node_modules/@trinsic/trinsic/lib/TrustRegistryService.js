"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrustRegistryService = void 0;
const ServiceBase_1 = __importDefault(require("./ServiceBase"));
const proto_1 = require("./proto");
class TrustRegistryService extends ServiceBase_1.default {
    client;
    constructor(options) {
        super(options);
        this.client = new proto_1.TrustRegistryClient(this.address, this.channelCredentials);
    }
    registerIssuer(request) {
        return new Promise(async (resolve, reject) => {
            this.client.registerIssuer(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    registerVerifier(request) {
        return new Promise(async (resolve, reject) => {
            this.client.registerVerifier(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    unregisterIssuer(request) {
        return new Promise(async (resolve, reject) => {
            this.client.unregisterIssuer(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    unregisterVerifier(request) {
        return new Promise(async (resolve, reject) => {
            this.client.unregisterVerifier(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    checkIssuerStatus(request) {
        return new Promise(async (resolve, reject) => {
            this.client.checkIssuerStatus(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    checkVerifierStatus(request) {
        return new Promise(async (resolve, reject) => {
            this.client.checkVerifierStatus(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    searchRegistry(query = "SELECT * FROM c") {
        return new Promise(async (resolve, reject) => {
            const request = new proto_1.SearchRegistryRequest().setQuery(query);
            this.client.searchRegistry(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    addGovernanceFramework(request) {
        return new Promise(async (resolve, reject) => {
            try {
                const uriString = request.getGovernanceFramework()?.getGovernanceFrameworkUri();
                new URL(uriString);
            }
            catch (e) {
                reject(e);
                return;
            }
            this.client.addFramework(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    removeGovernanceFramework(request) {
        return new Promise(async (resolve, reject) => {
            this.client.removeFramework(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    fetchData(request) {
        return new Promise(async (resolve, reject) => {
            return resolve(this.client.fetchData(request, await this.getMetadata(request)));
        });
    }
}
exports.TrustRegistryService = TrustRegistryService;
//# sourceMappingURL=TrustRegistryService.js.map