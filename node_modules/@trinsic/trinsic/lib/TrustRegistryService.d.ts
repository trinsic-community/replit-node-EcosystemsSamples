import ServiceBase from "./ServiceBase";
import { ServiceOptions, AddFrameworkRequest, AddFrameworkResponse, CheckIssuerStatusRequest, CheckIssuerStatusResponse, CheckVerifierStatusRequest, CheckVerifierStatusResponse, FetchDataRequest, RegisterIssuerRequest, RegisterIssuerResponse, RegisterVerifierRequest, RegisterVerifierResponse, RemoveFrameworkRequest, RemoveFrameworkResponse, SearchRegistryResponse, TrustRegistryClient, UnregisterIssuerRequest, UnregisterIssuerResponse, UnregisterVerifierRequest, UnregisterVerifierResponse } from "./proto";
import { ClientReadableStream } from "@grpc/grpc-js";
export declare class TrustRegistryService extends ServiceBase {
    client: TrustRegistryClient;
    constructor(options?: ServiceOptions);
    registerIssuer(request: RegisterIssuerRequest): Promise<RegisterIssuerResponse>;
    registerVerifier(request: RegisterVerifierRequest): Promise<RegisterVerifierResponse>;
    unregisterIssuer(request: UnregisterIssuerRequest): Promise<UnregisterIssuerResponse>;
    unregisterVerifier(request: UnregisterVerifierRequest): Promise<UnregisterVerifierResponse>;
    checkIssuerStatus(request: CheckIssuerStatusRequest): Promise<CheckIssuerStatusResponse>;
    checkVerifierStatus(request: CheckVerifierStatusRequest): Promise<CheckVerifierStatusResponse>;
    searchRegistry(query?: string): Promise<SearchRegistryResponse>;
    addGovernanceFramework(request: AddFrameworkRequest): Promise<AddFrameworkResponse>;
    removeGovernanceFramework(request: RemoveFrameworkRequest): Promise<RemoveFrameworkResponse>;
    fetchData(request: FetchDataRequest): Promise<ClientReadableStream<unknown>>;
}
