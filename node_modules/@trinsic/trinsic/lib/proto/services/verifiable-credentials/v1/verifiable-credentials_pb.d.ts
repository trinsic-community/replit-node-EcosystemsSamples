// package: services.verifiablecredentials.v1
// file: services/verifiable-credentials/v1/verifiable-credentials.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as services_common_v1_common_pb from "../../../services/common/v1/common_pb";

export class IssueRequest extends jspb.Message { 
    getDocumentJson(): string;
    setDocumentJson(value: string): IssueRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): IssueRequest.AsObject;
    static toObject(includeInstance: boolean, msg: IssueRequest): IssueRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: IssueRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): IssueRequest;
    static deserializeBinaryFromReader(message: IssueRequest, reader: jspb.BinaryReader): IssueRequest;
}

export namespace IssueRequest {
    export type AsObject = {
        documentJson: string,
    }
}

export class IssueResponse extends jspb.Message { 
    getSignedDocumentJson(): string;
    setSignedDocumentJson(value: string): IssueResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): IssueResponse.AsObject;
    static toObject(includeInstance: boolean, msg: IssueResponse): IssueResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: IssueResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): IssueResponse;
    static deserializeBinaryFromReader(message: IssueResponse, reader: jspb.BinaryReader): IssueResponse;
}

export namespace IssueResponse {
    export type AsObject = {
        signedDocumentJson: string,
    }
}

export class IssueFromTemplateRequest extends jspb.Message { 
    getTemplateId(): string;
    setTemplateId(value: string): IssueFromTemplateRequest;
    getValuesJson(): string;
    setValuesJson(value: string): IssueFromTemplateRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): IssueFromTemplateRequest.AsObject;
    static toObject(includeInstance: boolean, msg: IssueFromTemplateRequest): IssueFromTemplateRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: IssueFromTemplateRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): IssueFromTemplateRequest;
    static deserializeBinaryFromReader(message: IssueFromTemplateRequest, reader: jspb.BinaryReader): IssueFromTemplateRequest;
}

export namespace IssueFromTemplateRequest {
    export type AsObject = {
        templateId: string,
        valuesJson: string,
    }
}

export class IssueFromTemplateResponse extends jspb.Message { 
    getDocumentJson(): string;
    setDocumentJson(value: string): IssueFromTemplateResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): IssueFromTemplateResponse.AsObject;
    static toObject(includeInstance: boolean, msg: IssueFromTemplateResponse): IssueFromTemplateResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: IssueFromTemplateResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): IssueFromTemplateResponse;
    static deserializeBinaryFromReader(message: IssueFromTemplateResponse, reader: jspb.BinaryReader): IssueFromTemplateResponse;
}

export namespace IssueFromTemplateResponse {
    export type AsObject = {
        documentJson: string,
    }
}

export class CreateProofRequest extends jspb.Message { 
    getRevealDocumentJson(): string;
    setRevealDocumentJson(value: string): CreateProofRequest;

    hasItemId(): boolean;
    clearItemId(): void;
    getItemId(): string;
    setItemId(value: string): CreateProofRequest;

    hasDocumentJson(): boolean;
    clearDocumentJson(): void;
    getDocumentJson(): string;
    setDocumentJson(value: string): CreateProofRequest;

    getProofCase(): CreateProofRequest.ProofCase;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateProofRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateProofRequest): CreateProofRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateProofRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateProofRequest;
    static deserializeBinaryFromReader(message: CreateProofRequest, reader: jspb.BinaryReader): CreateProofRequest;
}

export namespace CreateProofRequest {
    export type AsObject = {
        revealDocumentJson: string,
        itemId: string,
        documentJson: string,
    }

    export enum ProofCase {
        PROOF_NOT_SET = 0,
        ITEM_ID = 2,
        DOCUMENT_JSON = 3,
    }

}

export class CreateProofResponse extends jspb.Message { 
    getProofDocumentJson(): string;
    setProofDocumentJson(value: string): CreateProofResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateProofResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateProofResponse): CreateProofResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateProofResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateProofResponse;
    static deserializeBinaryFromReader(message: CreateProofResponse, reader: jspb.BinaryReader): CreateProofResponse;
}

export namespace CreateProofResponse {
    export type AsObject = {
        proofDocumentJson: string,
    }
}

export class VerifyProofRequest extends jspb.Message { 
    getProofDocumentJson(): string;
    setProofDocumentJson(value: string): VerifyProofRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): VerifyProofRequest.AsObject;
    static toObject(includeInstance: boolean, msg: VerifyProofRequest): VerifyProofRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: VerifyProofRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): VerifyProofRequest;
    static deserializeBinaryFromReader(message: VerifyProofRequest, reader: jspb.BinaryReader): VerifyProofRequest;
}

export namespace VerifyProofRequest {
    export type AsObject = {
        proofDocumentJson: string,
    }
}

export class VerifyProofResponse extends jspb.Message { 
    getIsValid(): boolean;
    setIsValid(value: boolean): VerifyProofResponse;
    clearValidationMessagesList(): void;
    getValidationMessagesList(): Array<string>;
    setValidationMessagesList(value: Array<string>): VerifyProofResponse;
    addValidationMessages(value: string, index?: number): string;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): VerifyProofResponse.AsObject;
    static toObject(includeInstance: boolean, msg: VerifyProofResponse): VerifyProofResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: VerifyProofResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): VerifyProofResponse;
    static deserializeBinaryFromReader(message: VerifyProofResponse, reader: jspb.BinaryReader): VerifyProofResponse;
}

export namespace VerifyProofResponse {
    export type AsObject = {
        isValid: boolean,
        validationMessagesList: Array<string>,
    }
}

export class SendRequest extends jspb.Message { 

    hasEmail(): boolean;
    clearEmail(): void;
    getEmail(): string;
    setEmail(value: string): SendRequest;

    hasDidUri(): boolean;
    clearDidUri(): void;
    getDidUri(): string;
    setDidUri(value: string): SendRequest;

    hasDidcommInvitationJson(): boolean;
    clearDidcommInvitationJson(): void;
    getDidcommInvitationJson(): string;
    setDidcommInvitationJson(value: string): SendRequest;
    getDocumentJson(): string;
    setDocumentJson(value: string): SendRequest;

    getDeliveryMethodCase(): SendRequest.DeliveryMethodCase;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SendRequest.AsObject;
    static toObject(includeInstance: boolean, msg: SendRequest): SendRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SendRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SendRequest;
    static deserializeBinaryFromReader(message: SendRequest, reader: jspb.BinaryReader): SendRequest;
}

export namespace SendRequest {
    export type AsObject = {
        email: string,
        didUri: string,
        didcommInvitationJson: string,
        documentJson: string,
    }

    export enum DeliveryMethodCase {
        DELIVERY_METHOD_NOT_SET = 0,
        EMAIL = 1,
        DID_URI = 2,
        DIDCOMM_INVITATION_JSON = 3,
    }

}

export class SendResponse extends jspb.Message { 
    getStatus(): services_common_v1_common_pb.ResponseStatus;
    setStatus(value: services_common_v1_common_pb.ResponseStatus): SendResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SendResponse.AsObject;
    static toObject(includeInstance: boolean, msg: SendResponse): SendResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SendResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SendResponse;
    static deserializeBinaryFromReader(message: SendResponse, reader: jspb.BinaryReader): SendResponse;
}

export namespace SendResponse {
    export type AsObject = {
        status: services_common_v1_common_pb.ResponseStatus,
    }
}

export class UpdateStatusRequest extends jspb.Message { 
    getCredentialStatusId(): string;
    setCredentialStatusId(value: string): UpdateStatusRequest;
    getRevoked(): boolean;
    setRevoked(value: boolean): UpdateStatusRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateStatusRequest.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateStatusRequest): UpdateStatusRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateStatusRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateStatusRequest;
    static deserializeBinaryFromReader(message: UpdateStatusRequest, reader: jspb.BinaryReader): UpdateStatusRequest;
}

export namespace UpdateStatusRequest {
    export type AsObject = {
        credentialStatusId: string,
        revoked: boolean,
    }
}

export class UpdateStatusResponse extends jspb.Message { 
    getStatus(): services_common_v1_common_pb.ResponseStatus;
    setStatus(value: services_common_v1_common_pb.ResponseStatus): UpdateStatusResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateStatusResponse.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateStatusResponse): UpdateStatusResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateStatusResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateStatusResponse;
    static deserializeBinaryFromReader(message: UpdateStatusResponse, reader: jspb.BinaryReader): UpdateStatusResponse;
}

export namespace UpdateStatusResponse {
    export type AsObject = {
        status: services_common_v1_common_pb.ResponseStatus,
    }
}

export class CheckStatusRequest extends jspb.Message { 
    getCredentialStatusId(): string;
    setCredentialStatusId(value: string): CheckStatusRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CheckStatusRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CheckStatusRequest): CheckStatusRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CheckStatusRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CheckStatusRequest;
    static deserializeBinaryFromReader(message: CheckStatusRequest, reader: jspb.BinaryReader): CheckStatusRequest;
}

export namespace CheckStatusRequest {
    export type AsObject = {
        credentialStatusId: string,
    }
}

export class CheckStatusResponse extends jspb.Message { 
    getRevoked(): boolean;
    setRevoked(value: boolean): CheckStatusResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CheckStatusResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CheckStatusResponse): CheckStatusResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CheckStatusResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CheckStatusResponse;
    static deserializeBinaryFromReader(message: CheckStatusResponse, reader: jspb.BinaryReader): CheckStatusResponse;
}

export namespace CheckStatusResponse {
    export type AsObject = {
        revoked: boolean,
    }
}
