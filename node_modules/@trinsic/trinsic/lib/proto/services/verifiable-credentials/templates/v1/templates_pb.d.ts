// package: services.verifiablecredentials.templates.v1
// file: services/verifiable-credentials/templates/v1/templates.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";

export class GetCredentialTemplateRequest extends jspb.Message { 
    getId(): string;
    setId(value: string): GetCredentialTemplateRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetCredentialTemplateRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GetCredentialTemplateRequest): GetCredentialTemplateRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetCredentialTemplateRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetCredentialTemplateRequest;
    static deserializeBinaryFromReader(message: GetCredentialTemplateRequest, reader: jspb.BinaryReader): GetCredentialTemplateRequest;
}

export namespace GetCredentialTemplateRequest {
    export type AsObject = {
        id: string,
    }
}

export class GetCredentialTemplateResponse extends jspb.Message { 

    hasTemplate(): boolean;
    clearTemplate(): void;
    getTemplate(): TemplateData | undefined;
    setTemplate(value?: TemplateData): GetCredentialTemplateResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetCredentialTemplateResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GetCredentialTemplateResponse): GetCredentialTemplateResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetCredentialTemplateResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetCredentialTemplateResponse;
    static deserializeBinaryFromReader(message: GetCredentialTemplateResponse, reader: jspb.BinaryReader): GetCredentialTemplateResponse;
}

export namespace GetCredentialTemplateResponse {
    export type AsObject = {
        template?: TemplateData.AsObject,
    }
}

export class SearchCredentialTemplatesRequest extends jspb.Message { 
    getQuery(): string;
    setQuery(value: string): SearchCredentialTemplatesRequest;
    getContinuationToken(): string;
    setContinuationToken(value: string): SearchCredentialTemplatesRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchCredentialTemplatesRequest.AsObject;
    static toObject(includeInstance: boolean, msg: SearchCredentialTemplatesRequest): SearchCredentialTemplatesRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchCredentialTemplatesRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchCredentialTemplatesRequest;
    static deserializeBinaryFromReader(message: SearchCredentialTemplatesRequest, reader: jspb.BinaryReader): SearchCredentialTemplatesRequest;
}

export namespace SearchCredentialTemplatesRequest {
    export type AsObject = {
        query: string,
        continuationToken: string,
    }
}

export class SearchCredentialTemplatesResponse extends jspb.Message { 
    getItemsJson(): string;
    setItemsJson(value: string): SearchCredentialTemplatesResponse;
    getHasMore(): boolean;
    setHasMore(value: boolean): SearchCredentialTemplatesResponse;
    getCount(): number;
    setCount(value: number): SearchCredentialTemplatesResponse;
    getContinuationToken(): string;
    setContinuationToken(value: string): SearchCredentialTemplatesResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchCredentialTemplatesResponse.AsObject;
    static toObject(includeInstance: boolean, msg: SearchCredentialTemplatesResponse): SearchCredentialTemplatesResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchCredentialTemplatesResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchCredentialTemplatesResponse;
    static deserializeBinaryFromReader(message: SearchCredentialTemplatesResponse, reader: jspb.BinaryReader): SearchCredentialTemplatesResponse;
}

export namespace SearchCredentialTemplatesResponse {
    export type AsObject = {
        itemsJson: string,
        hasMore: boolean,
        count: number,
        continuationToken: string,
    }
}

export class ListCredentialTemplatesRequest extends jspb.Message { 
    getQuery(): string;
    setQuery(value: string): ListCredentialTemplatesRequest;
    getContinuationToken(): string;
    setContinuationToken(value: string): ListCredentialTemplatesRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListCredentialTemplatesRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListCredentialTemplatesRequest): ListCredentialTemplatesRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListCredentialTemplatesRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListCredentialTemplatesRequest;
    static deserializeBinaryFromReader(message: ListCredentialTemplatesRequest, reader: jspb.BinaryReader): ListCredentialTemplatesRequest;
}

export namespace ListCredentialTemplatesRequest {
    export type AsObject = {
        query: string,
        continuationToken: string,
    }
}

export class ListCredentialTemplatesResponse extends jspb.Message { 
    clearTemplatesList(): void;
    getTemplatesList(): Array<TemplateData>;
    setTemplatesList(value: Array<TemplateData>): ListCredentialTemplatesResponse;
    addTemplates(value?: TemplateData, index?: number): TemplateData;
    getHasMoreResults(): boolean;
    setHasMoreResults(value: boolean): ListCredentialTemplatesResponse;
    getContinuationToken(): string;
    setContinuationToken(value: string): ListCredentialTemplatesResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListCredentialTemplatesResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListCredentialTemplatesResponse): ListCredentialTemplatesResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListCredentialTemplatesResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListCredentialTemplatesResponse;
    static deserializeBinaryFromReader(message: ListCredentialTemplatesResponse, reader: jspb.BinaryReader): ListCredentialTemplatesResponse;
}

export namespace ListCredentialTemplatesResponse {
    export type AsObject = {
        templatesList: Array<TemplateData.AsObject>,
        hasMoreResults: boolean,
        continuationToken: string,
    }
}

export class DeleteCredentialTemplateRequest extends jspb.Message { 
    getId(): string;
    setId(value: string): DeleteCredentialTemplateRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteCredentialTemplateRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteCredentialTemplateRequest): DeleteCredentialTemplateRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteCredentialTemplateRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteCredentialTemplateRequest;
    static deserializeBinaryFromReader(message: DeleteCredentialTemplateRequest, reader: jspb.BinaryReader): DeleteCredentialTemplateRequest;
}

export namespace DeleteCredentialTemplateRequest {
    export type AsObject = {
        id: string,
    }
}

export class DeleteCredentialTemplateResponse extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteCredentialTemplateResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteCredentialTemplateResponse): DeleteCredentialTemplateResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteCredentialTemplateResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteCredentialTemplateResponse;
    static deserializeBinaryFromReader(message: DeleteCredentialTemplateResponse, reader: jspb.BinaryReader): DeleteCredentialTemplateResponse;
}

export namespace DeleteCredentialTemplateResponse {
    export type AsObject = {
    }
}

export class CreateCredentialTemplateRequest extends jspb.Message { 
    getName(): string;
    setName(value: string): CreateCredentialTemplateRequest;

    getFieldsMap(): jspb.Map<string, TemplateField>;
    clearFieldsMap(): void;
    getAllowAdditionalFields(): boolean;
    setAllowAdditionalFields(value: boolean): CreateCredentialTemplateRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateCredentialTemplateRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CreateCredentialTemplateRequest): CreateCredentialTemplateRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateCredentialTemplateRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateCredentialTemplateRequest;
    static deserializeBinaryFromReader(message: CreateCredentialTemplateRequest, reader: jspb.BinaryReader): CreateCredentialTemplateRequest;
}

export namespace CreateCredentialTemplateRequest {
    export type AsObject = {
        name: string,

        fieldsMap: Array<[string, TemplateField.AsObject]>,
        allowAdditionalFields: boolean,
    }
}

export class CreateCredentialTemplateResponse extends jspb.Message { 

    hasData(): boolean;
    clearData(): void;
    getData(): TemplateData | undefined;
    setData(value?: TemplateData): CreateCredentialTemplateResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CreateCredentialTemplateResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CreateCredentialTemplateResponse): CreateCredentialTemplateResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CreateCredentialTemplateResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CreateCredentialTemplateResponse;
    static deserializeBinaryFromReader(message: CreateCredentialTemplateResponse, reader: jspb.BinaryReader): CreateCredentialTemplateResponse;
}

export namespace CreateCredentialTemplateResponse {
    export type AsObject = {
        data?: TemplateData.AsObject,
    }
}

export class TemplateField extends jspb.Message { 
    getDescription(): string;
    setDescription(value: string): TemplateField;
    getOptional(): boolean;
    setOptional(value: boolean): TemplateField;
    getType(): FieldType;
    setType(value: FieldType): TemplateField;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): TemplateField.AsObject;
    static toObject(includeInstance: boolean, msg: TemplateField): TemplateField.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: TemplateField, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): TemplateField;
    static deserializeBinaryFromReader(message: TemplateField, reader: jspb.BinaryReader): TemplateField;
}

export namespace TemplateField {
    export type AsObject = {
        description: string,
        optional: boolean,
        type: FieldType,
    }
}

export class GetTemplateRequest extends jspb.Message { 
    getId(): string;
    setId(value: string): GetTemplateRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetTemplateRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GetTemplateRequest): GetTemplateRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetTemplateRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetTemplateRequest;
    static deserializeBinaryFromReader(message: GetTemplateRequest, reader: jspb.BinaryReader): GetTemplateRequest;
}

export namespace GetTemplateRequest {
    export type AsObject = {
        id: string,
    }
}

export class GetTemplateResponse extends jspb.Message { 

    hasData(): boolean;
    clearData(): void;
    getData(): TemplateData | undefined;
    setData(value?: TemplateData): GetTemplateResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetTemplateResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GetTemplateResponse): GetTemplateResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetTemplateResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetTemplateResponse;
    static deserializeBinaryFromReader(message: GetTemplateResponse, reader: jspb.BinaryReader): GetTemplateResponse;
}

export namespace GetTemplateResponse {
    export type AsObject = {
        data?: TemplateData.AsObject,
    }
}

export class ListTemplatesRequest extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListTemplatesRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListTemplatesRequest): ListTemplatesRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListTemplatesRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListTemplatesRequest;
    static deserializeBinaryFromReader(message: ListTemplatesRequest, reader: jspb.BinaryReader): ListTemplatesRequest;
}

export namespace ListTemplatesRequest {
    export type AsObject = {
    }
}

export class ListTemplatesResponse extends jspb.Message { 
    clearTemplatesList(): void;
    getTemplatesList(): Array<TemplateData>;
    setTemplatesList(value: Array<TemplateData>): ListTemplatesResponse;
    addTemplates(value?: TemplateData, index?: number): TemplateData;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListTemplatesResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListTemplatesResponse): ListTemplatesResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListTemplatesResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListTemplatesResponse;
    static deserializeBinaryFromReader(message: ListTemplatesResponse, reader: jspb.BinaryReader): ListTemplatesResponse;
}

export namespace ListTemplatesResponse {
    export type AsObject = {
        templatesList: Array<TemplateData.AsObject>,
    }
}

export class TemplateData extends jspb.Message { 
    getId(): string;
    setId(value: string): TemplateData;
    getName(): string;
    setName(value: string): TemplateData;
    getVersion(): number;
    setVersion(value: number): TemplateData;

    getFieldsMap(): jspb.Map<string, TemplateField>;
    clearFieldsMap(): void;
    getAllowAdditionalFields(): boolean;
    setAllowAdditionalFields(value: boolean): TemplateData;
    getSchemaUri(): string;
    setSchemaUri(value: string): TemplateData;
    getContextUri(): string;
    setContextUri(value: string): TemplateData;
    getEcosystemId(): string;
    setEcosystemId(value: string): TemplateData;
    getType(): string;
    setType(value: string): TemplateData;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): TemplateData.AsObject;
    static toObject(includeInstance: boolean, msg: TemplateData): TemplateData.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: TemplateData, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): TemplateData;
    static deserializeBinaryFromReader(message: TemplateData, reader: jspb.BinaryReader): TemplateData;
}

export namespace TemplateData {
    export type AsObject = {
        id: string,
        name: string,
        version: number,

        fieldsMap: Array<[string, TemplateField.AsObject]>,
        allowAdditionalFields: boolean,
        schemaUri: string,
        contextUri: string,
        ecosystemId: string,
        type: string,
    }
}

export enum FieldType {
    STRING = 0,
    NUMBER = 1,
    BOOL = 2,
    DATETIME = 4,
}
