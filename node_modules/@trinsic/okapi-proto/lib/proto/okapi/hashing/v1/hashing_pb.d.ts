// package: okapi.hashing.v1
// file: okapi/hashing/v1/hashing.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";

export class Blake3HashRequest extends jspb.Message {
  getData(): Uint8Array | string;
  getData_asU8(): Uint8Array;
  getData_asB64(): string;
  setData(value: Uint8Array | string): Blake3HashRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Blake3HashRequest.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: Blake3HashRequest
  ): Blake3HashRequest.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: Blake3HashRequest,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): Blake3HashRequest;
  static deserializeBinaryFromReader(
    message: Blake3HashRequest,
    reader: jspb.BinaryReader
  ): Blake3HashRequest;
}

export namespace Blake3HashRequest {
  export type AsObject = {
    data: Uint8Array | string;
  };
}

export class Blake3HashResponse extends jspb.Message {
  getDigest(): Uint8Array | string;
  getDigest_asU8(): Uint8Array;
  getDigest_asB64(): string;
  setDigest(value: Uint8Array | string): Blake3HashResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Blake3HashResponse.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: Blake3HashResponse
  ): Blake3HashResponse.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: Blake3HashResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): Blake3HashResponse;
  static deserializeBinaryFromReader(
    message: Blake3HashResponse,
    reader: jspb.BinaryReader
  ): Blake3HashResponse;
}

export namespace Blake3HashResponse {
  export type AsObject = {
    digest: Uint8Array | string;
  };
}

export class Blake3KeyedHashRequest extends jspb.Message {
  getData(): Uint8Array | string;
  getData_asU8(): Uint8Array;
  getData_asB64(): string;
  setData(value: Uint8Array | string): Blake3KeyedHashRequest;
  getKey(): Uint8Array | string;
  getKey_asU8(): Uint8Array;
  getKey_asB64(): string;
  setKey(value: Uint8Array | string): Blake3KeyedHashRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Blake3KeyedHashRequest.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: Blake3KeyedHashRequest
  ): Blake3KeyedHashRequest.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: Blake3KeyedHashRequest,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): Blake3KeyedHashRequest;
  static deserializeBinaryFromReader(
    message: Blake3KeyedHashRequest,
    reader: jspb.BinaryReader
  ): Blake3KeyedHashRequest;
}

export namespace Blake3KeyedHashRequest {
  export type AsObject = {
    data: Uint8Array | string;
    key: Uint8Array | string;
  };
}

export class Blake3KeyedHashResponse extends jspb.Message {
  getDigest(): Uint8Array | string;
  getDigest_asU8(): Uint8Array;
  getDigest_asB64(): string;
  setDigest(value: Uint8Array | string): Blake3KeyedHashResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Blake3KeyedHashResponse.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: Blake3KeyedHashResponse
  ): Blake3KeyedHashResponse.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: Blake3KeyedHashResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): Blake3KeyedHashResponse;
  static deserializeBinaryFromReader(
    message: Blake3KeyedHashResponse,
    reader: jspb.BinaryReader
  ): Blake3KeyedHashResponse;
}

export namespace Blake3KeyedHashResponse {
  export type AsObject = {
    digest: Uint8Array | string;
  };
}

export class Blake3DeriveKeyRequest extends jspb.Message {
  getContext(): Uint8Array | string;
  getContext_asU8(): Uint8Array;
  getContext_asB64(): string;
  setContext(value: Uint8Array | string): Blake3DeriveKeyRequest;
  getKeyMaterial(): Uint8Array | string;
  getKeyMaterial_asU8(): Uint8Array;
  getKeyMaterial_asB64(): string;
  setKeyMaterial(value: Uint8Array | string): Blake3DeriveKeyRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Blake3DeriveKeyRequest.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: Blake3DeriveKeyRequest
  ): Blake3DeriveKeyRequest.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: Blake3DeriveKeyRequest,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): Blake3DeriveKeyRequest;
  static deserializeBinaryFromReader(
    message: Blake3DeriveKeyRequest,
    reader: jspb.BinaryReader
  ): Blake3DeriveKeyRequest;
}

export namespace Blake3DeriveKeyRequest {
  export type AsObject = {
    context: Uint8Array | string;
    keyMaterial: Uint8Array | string;
  };
}

export class Blake3DeriveKeyResponse extends jspb.Message {
  getDigest(): Uint8Array | string;
  getDigest_asU8(): Uint8Array;
  getDigest_asB64(): string;
  setDigest(value: Uint8Array | string): Blake3DeriveKeyResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Blake3DeriveKeyResponse.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: Blake3DeriveKeyResponse
  ): Blake3DeriveKeyResponse.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: Blake3DeriveKeyResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): Blake3DeriveKeyResponse;
  static deserializeBinaryFromReader(
    message: Blake3DeriveKeyResponse,
    reader: jspb.BinaryReader
  ): Blake3DeriveKeyResponse;
}

export namespace Blake3DeriveKeyResponse {
  export type AsObject = {
    digest: Uint8Array | string;
  };
}

export class SHA256HashRequest extends jspb.Message {
  getData(): Uint8Array | string;
  getData_asU8(): Uint8Array;
  getData_asB64(): string;
  setData(value: Uint8Array | string): SHA256HashRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SHA256HashRequest.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: SHA256HashRequest
  ): SHA256HashRequest.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: SHA256HashRequest,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): SHA256HashRequest;
  static deserializeBinaryFromReader(
    message: SHA256HashRequest,
    reader: jspb.BinaryReader
  ): SHA256HashRequest;
}

export namespace SHA256HashRequest {
  export type AsObject = {
    data: Uint8Array | string;
  };
}

export class SHA256HashResponse extends jspb.Message {
  getDigest(): Uint8Array | string;
  getDigest_asU8(): Uint8Array;
  getDigest_asB64(): string;
  setDigest(value: Uint8Array | string): SHA256HashResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SHA256HashResponse.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: SHA256HashResponse
  ): SHA256HashResponse.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: SHA256HashResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): SHA256HashResponse;
  static deserializeBinaryFromReader(
    message: SHA256HashResponse,
    reader: jspb.BinaryReader
  ): SHA256HashResponse;
}

export namespace SHA256HashResponse {
  export type AsObject = {
    digest: Uint8Array | string;
  };
}
