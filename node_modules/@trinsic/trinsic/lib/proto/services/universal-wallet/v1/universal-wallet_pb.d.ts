// package: services.universalwallet.v1
// file: services/universal-wallet/v1/universal-wallet.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as services_common_v1_common_pb from "../../../services/common/v1/common_pb";

export class SearchRequest extends jspb.Message { 
    getQuery(): string;
    setQuery(value: string): SearchRequest;
    getContinuationToken(): string;
    setContinuationToken(value: string): SearchRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchRequest.AsObject;
    static toObject(includeInstance: boolean, msg: SearchRequest): SearchRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchRequest;
    static deserializeBinaryFromReader(message: SearchRequest, reader: jspb.BinaryReader): SearchRequest;
}

export namespace SearchRequest {
    export type AsObject = {
        query: string,
        continuationToken: string,
    }
}

export class SearchResponse extends jspb.Message { 
    clearItemsList(): void;
    getItemsList(): Array<string>;
    setItemsList(value: Array<string>): SearchResponse;
    addItems(value: string, index?: number): string;
    getHasMore(): boolean;
    setHasMore(value: boolean): SearchResponse;
    getCount(): number;
    setCount(value: number): SearchResponse;
    getContinuationToken(): string;
    setContinuationToken(value: string): SearchResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchResponse.AsObject;
    static toObject(includeInstance: boolean, msg: SearchResponse): SearchResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchResponse;
    static deserializeBinaryFromReader(message: SearchResponse, reader: jspb.BinaryReader): SearchResponse;
}

export namespace SearchResponse {
    export type AsObject = {
        itemsList: Array<string>,
        hasMore: boolean,
        count: number,
        continuationToken: string,
    }
}

export class GetItemRequest extends jspb.Message { 
    getItemId(): string;
    setItemId(value: string): GetItemRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetItemRequest.AsObject;
    static toObject(includeInstance: boolean, msg: GetItemRequest): GetItemRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetItemRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetItemRequest;
    static deserializeBinaryFromReader(message: GetItemRequest, reader: jspb.BinaryReader): GetItemRequest;
}

export namespace GetItemRequest {
    export type AsObject = {
        itemId: string,
    }
}

export class GetItemResponse extends jspb.Message { 
    getItemJson(): string;
    setItemJson(value: string): GetItemResponse;
    getItemType(): string;
    setItemType(value: string): GetItemResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GetItemResponse.AsObject;
    static toObject(includeInstance: boolean, msg: GetItemResponse): GetItemResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GetItemResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GetItemResponse;
    static deserializeBinaryFromReader(message: GetItemResponse, reader: jspb.BinaryReader): GetItemResponse;
}

export namespace GetItemResponse {
    export type AsObject = {
        itemJson: string,
        itemType: string,
    }
}

export class UpdateItemRequest extends jspb.Message { 
    getItemId(): string;
    setItemId(value: string): UpdateItemRequest;
    getItemType(): string;
    setItemType(value: string): UpdateItemRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateItemRequest.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateItemRequest): UpdateItemRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateItemRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateItemRequest;
    static deserializeBinaryFromReader(message: UpdateItemRequest, reader: jspb.BinaryReader): UpdateItemRequest;
}

export namespace UpdateItemRequest {
    export type AsObject = {
        itemId: string,
        itemType: string,
    }
}

export class UpdateItemResponse extends jspb.Message { 
    getStatus(): services_common_v1_common_pb.ResponseStatus;
    setStatus(value: services_common_v1_common_pb.ResponseStatus): UpdateItemResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UpdateItemResponse.AsObject;
    static toObject(includeInstance: boolean, msg: UpdateItemResponse): UpdateItemResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UpdateItemResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UpdateItemResponse;
    static deserializeBinaryFromReader(message: UpdateItemResponse, reader: jspb.BinaryReader): UpdateItemResponse;
}

export namespace UpdateItemResponse {
    export type AsObject = {
        status: services_common_v1_common_pb.ResponseStatus,
    }
}

export class InsertItemRequest extends jspb.Message { 
    getItemJson(): string;
    setItemJson(value: string): InsertItemRequest;
    getItemType(): string;
    setItemType(value: string): InsertItemRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InsertItemRequest.AsObject;
    static toObject(includeInstance: boolean, msg: InsertItemRequest): InsertItemRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InsertItemRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InsertItemRequest;
    static deserializeBinaryFromReader(message: InsertItemRequest, reader: jspb.BinaryReader): InsertItemRequest;
}

export namespace InsertItemRequest {
    export type AsObject = {
        itemJson: string,
        itemType: string,
    }
}

export class InsertItemResponse extends jspb.Message { 
    getStatus(): services_common_v1_common_pb.ResponseStatus;
    setStatus(value: services_common_v1_common_pb.ResponseStatus): InsertItemResponse;
    getItemId(): string;
    setItemId(value: string): InsertItemResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InsertItemResponse.AsObject;
    static toObject(includeInstance: boolean, msg: InsertItemResponse): InsertItemResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InsertItemResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InsertItemResponse;
    static deserializeBinaryFromReader(message: InsertItemResponse, reader: jspb.BinaryReader): InsertItemResponse;
}

export namespace InsertItemResponse {
    export type AsObject = {
        status: services_common_v1_common_pb.ResponseStatus,
        itemId: string,
    }
}

export class DeleteItemRequest extends jspb.Message { 
    getItemId(): string;
    setItemId(value: string): DeleteItemRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteItemRequest.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteItemRequest): DeleteItemRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteItemRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteItemRequest;
    static deserializeBinaryFromReader(message: DeleteItemRequest, reader: jspb.BinaryReader): DeleteItemRequest;
}

export namespace DeleteItemRequest {
    export type AsObject = {
        itemId: string,
    }
}

export class DeleteItemResponse extends jspb.Message { 
    getStatus(): services_common_v1_common_pb.ResponseStatus;
    setStatus(value: services_common_v1_common_pb.ResponseStatus): DeleteItemResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): DeleteItemResponse.AsObject;
    static toObject(includeInstance: boolean, msg: DeleteItemResponse): DeleteItemResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: DeleteItemResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): DeleteItemResponse;
    static deserializeBinaryFromReader(message: DeleteItemResponse, reader: jspb.BinaryReader): DeleteItemResponse;
}

export namespace DeleteItemResponse {
    export type AsObject = {
        status: services_common_v1_common_pb.ResponseStatus,
    }
}
