// package: okapi.security.v1
// file: okapi/security/v1/security.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";

export class CreateOberonKeyRequest extends jspb.Message {
  getSeed(): Uint8Array | string;
  getSeed_asU8(): Uint8Array;
  getSeed_asB64(): string;
  setSeed(value: Uint8Array | string): CreateOberonKeyRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateOberonKeyRequest.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: CreateOberonKeyRequest
  ): CreateOberonKeyRequest.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: CreateOberonKeyRequest,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): CreateOberonKeyRequest;
  static deserializeBinaryFromReader(
    message: CreateOberonKeyRequest,
    reader: jspb.BinaryReader
  ): CreateOberonKeyRequest;
}

export namespace CreateOberonKeyRequest {
  export type AsObject = {
    seed: Uint8Array | string;
  };
}

export class CreateOberonKeyResponse extends jspb.Message {
  getSk(): Uint8Array | string;
  getSk_asU8(): Uint8Array;
  getSk_asB64(): string;
  setSk(value: Uint8Array | string): CreateOberonKeyResponse;
  getPk(): Uint8Array | string;
  getPk_asU8(): Uint8Array;
  getPk_asB64(): string;
  setPk(value: Uint8Array | string): CreateOberonKeyResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateOberonKeyResponse.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: CreateOberonKeyResponse
  ): CreateOberonKeyResponse.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: CreateOberonKeyResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): CreateOberonKeyResponse;
  static deserializeBinaryFromReader(
    message: CreateOberonKeyResponse,
    reader: jspb.BinaryReader
  ): CreateOberonKeyResponse;
}

export namespace CreateOberonKeyResponse {
  export type AsObject = {
    sk: Uint8Array | string;
    pk: Uint8Array | string;
  };
}

export class CreateOberonTokenRequest extends jspb.Message {
  getSk(): Uint8Array | string;
  getSk_asU8(): Uint8Array;
  getSk_asB64(): string;
  setSk(value: Uint8Array | string): CreateOberonTokenRequest;
  getData(): Uint8Array | string;
  getData_asU8(): Uint8Array;
  getData_asB64(): string;
  setData(value: Uint8Array | string): CreateOberonTokenRequest;
  clearBlindingList(): void;
  getBlindingList(): Array<Uint8Array | string>;
  getBlindingList_asU8(): Array<Uint8Array>;
  getBlindingList_asB64(): Array<string>;
  setBlindingList(value: Array<Uint8Array | string>): CreateOberonTokenRequest;
  addBlinding(value: Uint8Array | string, index?: number): Uint8Array | string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateOberonTokenRequest.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: CreateOberonTokenRequest
  ): CreateOberonTokenRequest.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: CreateOberonTokenRequest,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): CreateOberonTokenRequest;
  static deserializeBinaryFromReader(
    message: CreateOberonTokenRequest,
    reader: jspb.BinaryReader
  ): CreateOberonTokenRequest;
}

export namespace CreateOberonTokenRequest {
  export type AsObject = {
    sk: Uint8Array | string;
    data: Uint8Array | string;
    blindingList: Array<Uint8Array | string>;
  };
}

export class CreateOberonTokenResponse extends jspb.Message {
  getToken(): Uint8Array | string;
  getToken_asU8(): Uint8Array;
  getToken_asB64(): string;
  setToken(value: Uint8Array | string): CreateOberonTokenResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateOberonTokenResponse.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: CreateOberonTokenResponse
  ): CreateOberonTokenResponse.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: CreateOberonTokenResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): CreateOberonTokenResponse;
  static deserializeBinaryFromReader(
    message: CreateOberonTokenResponse,
    reader: jspb.BinaryReader
  ): CreateOberonTokenResponse;
}

export namespace CreateOberonTokenResponse {
  export type AsObject = {
    token: Uint8Array | string;
  };
}

export class CreateOberonProofRequest extends jspb.Message {
  getData(): Uint8Array | string;
  getData_asU8(): Uint8Array;
  getData_asB64(): string;
  setData(value: Uint8Array | string): CreateOberonProofRequest;
  getToken(): Uint8Array | string;
  getToken_asU8(): Uint8Array;
  getToken_asB64(): string;
  setToken(value: Uint8Array | string): CreateOberonProofRequest;
  clearBlindingList(): void;
  getBlindingList(): Array<Uint8Array | string>;
  getBlindingList_asU8(): Array<Uint8Array>;
  getBlindingList_asB64(): Array<string>;
  setBlindingList(value: Array<Uint8Array | string>): CreateOberonProofRequest;
  addBlinding(value: Uint8Array | string, index?: number): Uint8Array | string;
  getNonce(): Uint8Array | string;
  getNonce_asU8(): Uint8Array;
  getNonce_asB64(): string;
  setNonce(value: Uint8Array | string): CreateOberonProofRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateOberonProofRequest.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: CreateOberonProofRequest
  ): CreateOberonProofRequest.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: CreateOberonProofRequest,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): CreateOberonProofRequest;
  static deserializeBinaryFromReader(
    message: CreateOberonProofRequest,
    reader: jspb.BinaryReader
  ): CreateOberonProofRequest;
}

export namespace CreateOberonProofRequest {
  export type AsObject = {
    data: Uint8Array | string;
    token: Uint8Array | string;
    blindingList: Array<Uint8Array | string>;
    nonce: Uint8Array | string;
  };
}

export class CreateOberonProofResponse extends jspb.Message {
  getProof(): Uint8Array | string;
  getProof_asU8(): Uint8Array;
  getProof_asB64(): string;
  setProof(value: Uint8Array | string): CreateOberonProofResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CreateOberonProofResponse.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: CreateOberonProofResponse
  ): CreateOberonProofResponse.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: CreateOberonProofResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): CreateOberonProofResponse;
  static deserializeBinaryFromReader(
    message: CreateOberonProofResponse,
    reader: jspb.BinaryReader
  ): CreateOberonProofResponse;
}

export namespace CreateOberonProofResponse {
  export type AsObject = {
    proof: Uint8Array | string;
  };
}

export class VerifyOberonProofRequest extends jspb.Message {
  getProof(): Uint8Array | string;
  getProof_asU8(): Uint8Array;
  getProof_asB64(): string;
  setProof(value: Uint8Array | string): VerifyOberonProofRequest;
  getData(): Uint8Array | string;
  getData_asU8(): Uint8Array;
  getData_asB64(): string;
  setData(value: Uint8Array | string): VerifyOberonProofRequest;
  getNonce(): Uint8Array | string;
  getNonce_asU8(): Uint8Array;
  getNonce_asB64(): string;
  setNonce(value: Uint8Array | string): VerifyOberonProofRequest;
  getPk(): Uint8Array | string;
  getPk_asU8(): Uint8Array;
  getPk_asB64(): string;
  setPk(value: Uint8Array | string): VerifyOberonProofRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VerifyOberonProofRequest.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: VerifyOberonProofRequest
  ): VerifyOberonProofRequest.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: VerifyOberonProofRequest,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): VerifyOberonProofRequest;
  static deserializeBinaryFromReader(
    message: VerifyOberonProofRequest,
    reader: jspb.BinaryReader
  ): VerifyOberonProofRequest;
}

export namespace VerifyOberonProofRequest {
  export type AsObject = {
    proof: Uint8Array | string;
    data: Uint8Array | string;
    nonce: Uint8Array | string;
    pk: Uint8Array | string;
  };
}

export class VerifyOberonProofResponse extends jspb.Message {
  getValid(): boolean;
  setValid(value: boolean): VerifyOberonProofResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VerifyOberonProofResponse.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: VerifyOberonProofResponse
  ): VerifyOberonProofResponse.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: VerifyOberonProofResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): VerifyOberonProofResponse;
  static deserializeBinaryFromReader(
    message: VerifyOberonProofResponse,
    reader: jspb.BinaryReader
  ): VerifyOberonProofResponse;
}

export namespace VerifyOberonProofResponse {
  export type AsObject = {
    valid: boolean;
  };
}

export class BlindOberonTokenRequest extends jspb.Message {
  getToken(): Uint8Array | string;
  getToken_asU8(): Uint8Array;
  getToken_asB64(): string;
  setToken(value: Uint8Array | string): BlindOberonTokenRequest;
  clearBlindingList(): void;
  getBlindingList(): Array<Uint8Array | string>;
  getBlindingList_asU8(): Array<Uint8Array>;
  getBlindingList_asB64(): Array<string>;
  setBlindingList(value: Array<Uint8Array | string>): BlindOberonTokenRequest;
  addBlinding(value: Uint8Array | string, index?: number): Uint8Array | string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BlindOberonTokenRequest.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: BlindOberonTokenRequest
  ): BlindOberonTokenRequest.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: BlindOberonTokenRequest,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): BlindOberonTokenRequest;
  static deserializeBinaryFromReader(
    message: BlindOberonTokenRequest,
    reader: jspb.BinaryReader
  ): BlindOberonTokenRequest;
}

export namespace BlindOberonTokenRequest {
  export type AsObject = {
    token: Uint8Array | string;
    blindingList: Array<Uint8Array | string>;
  };
}

export class BlindOberonTokenResponse extends jspb.Message {
  getToken(): Uint8Array | string;
  getToken_asU8(): Uint8Array;
  getToken_asB64(): string;
  setToken(value: Uint8Array | string): BlindOberonTokenResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BlindOberonTokenResponse.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: BlindOberonTokenResponse
  ): BlindOberonTokenResponse.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: BlindOberonTokenResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): BlindOberonTokenResponse;
  static deserializeBinaryFromReader(
    message: BlindOberonTokenResponse,
    reader: jspb.BinaryReader
  ): BlindOberonTokenResponse;
}

export namespace BlindOberonTokenResponse {
  export type AsObject = {
    token: Uint8Array | string;
  };
}

export class UnBlindOberonTokenRequest extends jspb.Message {
  getToken(): Uint8Array | string;
  getToken_asU8(): Uint8Array;
  getToken_asB64(): string;
  setToken(value: Uint8Array | string): UnBlindOberonTokenRequest;
  clearBlindingList(): void;
  getBlindingList(): Array<Uint8Array | string>;
  getBlindingList_asU8(): Array<Uint8Array>;
  getBlindingList_asB64(): Array<string>;
  setBlindingList(value: Array<Uint8Array | string>): UnBlindOberonTokenRequest;
  addBlinding(value: Uint8Array | string, index?: number): Uint8Array | string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UnBlindOberonTokenRequest.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: UnBlindOberonTokenRequest
  ): UnBlindOberonTokenRequest.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: UnBlindOberonTokenRequest,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): UnBlindOberonTokenRequest;
  static deserializeBinaryFromReader(
    message: UnBlindOberonTokenRequest,
    reader: jspb.BinaryReader
  ): UnBlindOberonTokenRequest;
}

export namespace UnBlindOberonTokenRequest {
  export type AsObject = {
    token: Uint8Array | string;
    blindingList: Array<Uint8Array | string>;
  };
}

export class UnBlindOberonTokenResponse extends jspb.Message {
  getToken(): Uint8Array | string;
  getToken_asU8(): Uint8Array;
  getToken_asB64(): string;
  setToken(value: Uint8Array | string): UnBlindOberonTokenResponse;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UnBlindOberonTokenResponse.AsObject;
  static toObject(
    includeInstance: boolean,
    msg: UnBlindOberonTokenResponse
  ): UnBlindOberonTokenResponse.AsObject;
  static extensions: { [key: number]: jspb.ExtensionFieldInfo<jspb.Message> };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>;
  };
  static serializeBinaryToWriter(
    message: UnBlindOberonTokenResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): UnBlindOberonTokenResponse;
  static deserializeBinaryFromReader(
    message: UnBlindOberonTokenResponse,
    reader: jspb.BinaryReader
  ): UnBlindOberonTokenResponse;
}

export namespace UnBlindOberonTokenResponse {
  export type AsObject = {
    token: Uint8Array | string;
  };
}
