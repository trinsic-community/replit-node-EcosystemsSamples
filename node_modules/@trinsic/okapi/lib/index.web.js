var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as proto from "@trinsic/okapi-proto";
export * from "@trinsic/okapi-proto";
// eslint-disable-next-line @typescript-eslint/no-explicit-any
var native;
var initalized = false;
function initialize() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!initalized) return [3 /*break*/, 2];
                    return [4 /*yield*/, import("@trinsic/okapi-web")];
                case 1:
                    native = _a.sent();
                    initalized = true;
                    _a.label = 2;
                case 2: return [2 /*return*/];
            }
        });
    });
}
var DIDKey = /** @class */ (function () {
    function DIDKey() {
    }
    DIDKey.generate = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initialize()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, proto.GenerateKeyResponse.deserializeBinary(native.didkey_generate(request.serializeBinary()))];
                }
            });
        });
    };
    DIDKey.resolve = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initialize()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, proto.ResolveResponse.deserializeBinary(native.didkey_resolve(request.serializeBinary()))];
                }
            });
        });
    };
    return DIDKey;
}());
export { DIDKey };
var DIDComm = /** @class */ (function () {
    function DIDComm() {
    }
    DIDComm.pack = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initialize()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, proto.PackResponse.deserializeBinary(native.didcomm_pack(request.serializeBinary()))];
                }
            });
        });
    };
    DIDComm.unpack = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initialize()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, proto.UnpackResponse.deserializeBinary(native.didcomm_unpack(request.serializeBinary()))];
                }
            });
        });
    };
    DIDComm.sign = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initialize()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, proto.SignResponse.deserializeBinary(native.didcomm_sign(request.serializeBinary()))];
                }
            });
        });
    };
    DIDComm.verify = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initialize()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, proto.VerifyResponse.deserializeBinary(native.didcomm_verify(request.serializeBinary()))];
                }
            });
        });
    };
    return DIDComm;
}());
export { DIDComm };
var LdProofs = /** @class */ (function () {
    function LdProofs() {
    }
    LdProofs.generate = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initialize()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, proto.CreateProofResponse.deserializeBinary(native.ldproofs_create_proof(request.serializeBinary()))];
                }
            });
        });
    };
    LdProofs.convert = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initialize()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, proto.VerifyProofResponse.deserializeBinary(native.ldproofs_verify_proof(request.serializeBinary()))];
                }
            });
        });
    };
    return LdProofs;
}());
export { LdProofs };
var Oberon = /** @class */ (function () {
    function Oberon() {
    }
    Oberon.createKey = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initialize()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, proto.CreateOberonKeyResponse.deserializeBinary(native.oberon_create_key(request.serializeBinary()))];
                }
            });
        });
    };
    Oberon.createToken = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initialize()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, proto.CreateOberonTokenResponse.deserializeBinary(native.oberon_create_token(request.serializeBinary()))];
                }
            });
        });
    };
    Oberon.createProof = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initialize()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, proto.CreateOberonProofResponse.deserializeBinary(native.oberon_create_proof(request.serializeBinary()))];
                }
            });
        });
    };
    Oberon.verifyProof = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initialize()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, proto.VerifyOberonProofResponse.deserializeBinary(native.oberon_verify_proof(request.serializeBinary()))];
                }
            });
        });
    };
    Oberon.blindToken = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initialize()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, proto.BlindOberonTokenResponse.deserializeBinary(native.oberon_blind_token(request.serializeBinary()))];
                }
            });
        });
    };
    Oberon.unblindToken = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, initialize()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, proto.UnBlindOberonTokenResponse.deserializeBinary(native.oberon_unblind_token(request.serializeBinary()))];
                }
            });
        });
    };
    return Oberon;
}());
export { Oberon };
var Hashing = /** @class */ (function () {
    function Hashing() {
    }
    Hashing.blake3Hash = function (request) {
        return Promise.resolve(proto.Blake3HashResponse.deserializeBinary(native.blake3_hash(request.serializeBinary())));
    };
    Hashing.blake3KeyedHash = function (request) {
        return Promise.resolve(proto.Blake3KeyedHashResponse.deserializeBinary(native.blake3_keyed_hash(request.serializeBinary())));
    };
    Hashing.blake3DeriveKey = function (request) {
        return Promise.resolve(proto.Blake3DeriveKeyResponse.deserializeBinary(native.blake3_derive_key(request.serializeBinary())));
    };
    Hashing.sha256Hash = function (request) {
        return Promise.resolve(proto.SHA256HashResponse.deserializeBinary(native.sha256_hash(request.serializeBinary())));
    };
    return Hashing;
}());
export { Hashing };
//# sourceMappingURL=index.web.js.map