// GENERATED CODE -- DO NOT EDIT!

'use strict';
var grpc = require('@grpc/grpc-js');
var services_trust$registry_v1_trust$registry_pb = require('../../../services/trust-registry/v1/trust-registry_pb.js');
var services_common_v1_common_pb = require('../../../services/common/v1/common_pb.js');

function serialize_services_trustregistry_v1_AddFrameworkRequest(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.AddFrameworkRequest)) {
    throw new Error('Expected argument of type services.trustregistry.v1.AddFrameworkRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_AddFrameworkRequest(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.AddFrameworkRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_AddFrameworkResponse(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.AddFrameworkResponse)) {
    throw new Error('Expected argument of type services.trustregistry.v1.AddFrameworkResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_AddFrameworkResponse(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.AddFrameworkResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_CheckIssuerStatusRequest(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.CheckIssuerStatusRequest)) {
    throw new Error('Expected argument of type services.trustregistry.v1.CheckIssuerStatusRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_CheckIssuerStatusRequest(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.CheckIssuerStatusRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_CheckIssuerStatusResponse(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.CheckIssuerStatusResponse)) {
    throw new Error('Expected argument of type services.trustregistry.v1.CheckIssuerStatusResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_CheckIssuerStatusResponse(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.CheckIssuerStatusResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_CheckVerifierStatusRequest(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.CheckVerifierStatusRequest)) {
    throw new Error('Expected argument of type services.trustregistry.v1.CheckVerifierStatusRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_CheckVerifierStatusRequest(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.CheckVerifierStatusRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_CheckVerifierStatusResponse(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.CheckVerifierStatusResponse)) {
    throw new Error('Expected argument of type services.trustregistry.v1.CheckVerifierStatusResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_CheckVerifierStatusResponse(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.CheckVerifierStatusResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_FetchDataRequest(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.FetchDataRequest)) {
    throw new Error('Expected argument of type services.trustregistry.v1.FetchDataRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_FetchDataRequest(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.FetchDataRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_FetchDataResponse(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.FetchDataResponse)) {
    throw new Error('Expected argument of type services.trustregistry.v1.FetchDataResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_FetchDataResponse(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.FetchDataResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_RegisterIssuerRequest(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.RegisterIssuerRequest)) {
    throw new Error('Expected argument of type services.trustregistry.v1.RegisterIssuerRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_RegisterIssuerRequest(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.RegisterIssuerRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_RegisterIssuerResponse(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.RegisterIssuerResponse)) {
    throw new Error('Expected argument of type services.trustregistry.v1.RegisterIssuerResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_RegisterIssuerResponse(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.RegisterIssuerResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_RegisterVerifierRequest(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.RegisterVerifierRequest)) {
    throw new Error('Expected argument of type services.trustregistry.v1.RegisterVerifierRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_RegisterVerifierRequest(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.RegisterVerifierRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_RegisterVerifierResponse(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.RegisterVerifierResponse)) {
    throw new Error('Expected argument of type services.trustregistry.v1.RegisterVerifierResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_RegisterVerifierResponse(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.RegisterVerifierResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_RemoveFrameworkRequest(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.RemoveFrameworkRequest)) {
    throw new Error('Expected argument of type services.trustregistry.v1.RemoveFrameworkRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_RemoveFrameworkRequest(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.RemoveFrameworkRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_RemoveFrameworkResponse(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.RemoveFrameworkResponse)) {
    throw new Error('Expected argument of type services.trustregistry.v1.RemoveFrameworkResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_RemoveFrameworkResponse(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.RemoveFrameworkResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_SearchRegistryRequest(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.SearchRegistryRequest)) {
    throw new Error('Expected argument of type services.trustregistry.v1.SearchRegistryRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_SearchRegistryRequest(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.SearchRegistryRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_SearchRegistryResponse(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.SearchRegistryResponse)) {
    throw new Error('Expected argument of type services.trustregistry.v1.SearchRegistryResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_SearchRegistryResponse(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.SearchRegistryResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_UnregisterIssuerRequest(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.UnregisterIssuerRequest)) {
    throw new Error('Expected argument of type services.trustregistry.v1.UnregisterIssuerRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_UnregisterIssuerRequest(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.UnregisterIssuerRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_UnregisterIssuerResponse(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.UnregisterIssuerResponse)) {
    throw new Error('Expected argument of type services.trustregistry.v1.UnregisterIssuerResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_UnregisterIssuerResponse(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.UnregisterIssuerResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_UnregisterVerifierRequest(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.UnregisterVerifierRequest)) {
    throw new Error('Expected argument of type services.trustregistry.v1.UnregisterVerifierRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_UnregisterVerifierRequest(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.UnregisterVerifierRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_trustregistry_v1_UnregisterVerifierResponse(arg) {
  if (!(arg instanceof services_trust$registry_v1_trust$registry_pb.UnregisterVerifierResponse)) {
    throw new Error('Expected argument of type services.trustregistry.v1.UnregisterVerifierResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_trustregistry_v1_UnregisterVerifierResponse(buffer_arg) {
  return services_trust$registry_v1_trust$registry_pb.UnregisterVerifierResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


var TrustRegistryService = exports.TrustRegistryService = {
  // Adds a trust registry defintion to the ecosystem
addFramework: {
    path: '/services.trustregistry.v1.TrustRegistry/AddFramework',
    requestStream: false,
    responseStream: false,
    requestType: services_trust$registry_v1_trust$registry_pb.AddFrameworkRequest,
    responseType: services_trust$registry_v1_trust$registry_pb.AddFrameworkResponse,
    requestSerialize: serialize_services_trustregistry_v1_AddFrameworkRequest,
    requestDeserialize: deserialize_services_trustregistry_v1_AddFrameworkRequest,
    responseSerialize: serialize_services_trustregistry_v1_AddFrameworkResponse,
    responseDeserialize: deserialize_services_trustregistry_v1_AddFrameworkResponse,
  },
  removeFramework: {
    path: '/services.trustregistry.v1.TrustRegistry/RemoveFramework',
    requestStream: false,
    responseStream: false,
    requestType: services_trust$registry_v1_trust$registry_pb.RemoveFrameworkRequest,
    responseType: services_trust$registry_v1_trust$registry_pb.RemoveFrameworkResponse,
    requestSerialize: serialize_services_trustregistry_v1_RemoveFrameworkRequest,
    requestDeserialize: deserialize_services_trustregistry_v1_RemoveFrameworkRequest,
    responseSerialize: serialize_services_trustregistry_v1_RemoveFrameworkResponse,
    responseDeserialize: deserialize_services_trustregistry_v1_RemoveFrameworkResponse,
  },
  searchRegistry: {
    path: '/services.trustregistry.v1.TrustRegistry/SearchRegistry',
    requestStream: false,
    responseStream: false,
    requestType: services_trust$registry_v1_trust$registry_pb.SearchRegistryRequest,
    responseType: services_trust$registry_v1_trust$registry_pb.SearchRegistryResponse,
    requestSerialize: serialize_services_trustregistry_v1_SearchRegistryRequest,
    requestDeserialize: deserialize_services_trustregistry_v1_SearchRegistryRequest,
    responseSerialize: serialize_services_trustregistry_v1_SearchRegistryResponse,
    responseDeserialize: deserialize_services_trustregistry_v1_SearchRegistryResponse,
  },
  // Registers an authoritative issuer with a credential template
registerIssuer: {
    path: '/services.trustregistry.v1.TrustRegistry/RegisterIssuer',
    requestStream: false,
    responseStream: false,
    requestType: services_trust$registry_v1_trust$registry_pb.RegisterIssuerRequest,
    responseType: services_trust$registry_v1_trust$registry_pb.RegisterIssuerResponse,
    requestSerialize: serialize_services_trustregistry_v1_RegisterIssuerRequest,
    requestDeserialize: deserialize_services_trustregistry_v1_RegisterIssuerRequest,
    responseSerialize: serialize_services_trustregistry_v1_RegisterIssuerResponse,
    responseDeserialize: deserialize_services_trustregistry_v1_RegisterIssuerResponse,
  },
  // Registers an authoritative verifier with a credential template
registerVerifier: {
    path: '/services.trustregistry.v1.TrustRegistry/RegisterVerifier',
    requestStream: false,
    responseStream: false,
    requestType: services_trust$registry_v1_trust$registry_pb.RegisterVerifierRequest,
    responseType: services_trust$registry_v1_trust$registry_pb.RegisterVerifierResponse,
    requestSerialize: serialize_services_trustregistry_v1_RegisterVerifierRequest,
    requestDeserialize: deserialize_services_trustregistry_v1_RegisterVerifierRequest,
    responseSerialize: serialize_services_trustregistry_v1_RegisterVerifierResponse,
    responseDeserialize: deserialize_services_trustregistry_v1_RegisterVerifierResponse,
  },
  // Removes an authoritative issuer with a credential template from the trust registry
unregisterIssuer: {
    path: '/services.trustregistry.v1.TrustRegistry/UnregisterIssuer',
    requestStream: false,
    responseStream: false,
    requestType: services_trust$registry_v1_trust$registry_pb.UnregisterIssuerRequest,
    responseType: services_trust$registry_v1_trust$registry_pb.UnregisterIssuerResponse,
    requestSerialize: serialize_services_trustregistry_v1_UnregisterIssuerRequest,
    requestDeserialize: deserialize_services_trustregistry_v1_UnregisterIssuerRequest,
    responseSerialize: serialize_services_trustregistry_v1_UnregisterIssuerResponse,
    responseDeserialize: deserialize_services_trustregistry_v1_UnregisterIssuerResponse,
  },
  // Removes an authoritative verifier with a presentation template from the trust registry
unregisterVerifier: {
    path: '/services.trustregistry.v1.TrustRegistry/UnregisterVerifier',
    requestStream: false,
    responseStream: false,
    requestType: services_trust$registry_v1_trust$registry_pb.UnregisterVerifierRequest,
    responseType: services_trust$registry_v1_trust$registry_pb.UnregisterVerifierResponse,
    requestSerialize: serialize_services_trustregistry_v1_UnregisterVerifierRequest,
    requestDeserialize: deserialize_services_trustregistry_v1_UnregisterVerifierRequest,
    responseSerialize: serialize_services_trustregistry_v1_UnregisterVerifierResponse,
    responseDeserialize: deserialize_services_trustregistry_v1_UnregisterVerifierResponse,
  },
  checkIssuerStatus: {
    path: '/services.trustregistry.v1.TrustRegistry/CheckIssuerStatus',
    requestStream: false,
    responseStream: false,
    requestType: services_trust$registry_v1_trust$registry_pb.CheckIssuerStatusRequest,
    responseType: services_trust$registry_v1_trust$registry_pb.CheckIssuerStatusResponse,
    requestSerialize: serialize_services_trustregistry_v1_CheckIssuerStatusRequest,
    requestDeserialize: deserialize_services_trustregistry_v1_CheckIssuerStatusRequest,
    responseSerialize: serialize_services_trustregistry_v1_CheckIssuerStatusResponse,
    responseDeserialize: deserialize_services_trustregistry_v1_CheckIssuerStatusResponse,
  },
  checkVerifierStatus: {
    path: '/services.trustregistry.v1.TrustRegistry/CheckVerifierStatus',
    requestStream: false,
    responseStream: false,
    requestType: services_trust$registry_v1_trust$registry_pb.CheckVerifierStatusRequest,
    responseType: services_trust$registry_v1_trust$registry_pb.CheckVerifierStatusResponse,
    requestSerialize: serialize_services_trustregistry_v1_CheckVerifierStatusRequest,
    requestDeserialize: deserialize_services_trustregistry_v1_CheckVerifierStatusRequest,
    responseSerialize: serialize_services_trustregistry_v1_CheckVerifierStatusResponse,
    responseDeserialize: deserialize_services_trustregistry_v1_CheckVerifierStatusResponse,
  },
  fetchData: {
    path: '/services.trustregistry.v1.TrustRegistry/FetchData',
    requestStream: false,
    responseStream: true,
    requestType: services_trust$registry_v1_trust$registry_pb.FetchDataRequest,
    responseType: services_trust$registry_v1_trust$registry_pb.FetchDataResponse,
    requestSerialize: serialize_services_trustregistry_v1_FetchDataRequest,
    requestDeserialize: deserialize_services_trustregistry_v1_FetchDataRequest,
    responseSerialize: serialize_services_trustregistry_v1_FetchDataResponse,
    responseDeserialize: deserialize_services_trustregistry_v1_FetchDataResponse,
  },
};

exports.TrustRegistryClient = grpc.makeGenericClientConstructor(TrustRegistryService);
