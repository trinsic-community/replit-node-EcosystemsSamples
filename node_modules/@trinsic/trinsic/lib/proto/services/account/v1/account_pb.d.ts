// package: services.account.v1
// file: services/account/v1/account.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as services_common_v1_common_pb from "../../../services/common/v1/common_pb";

export class SignInRequest extends jspb.Message { 

    hasDetails(): boolean;
    clearDetails(): void;
    getDetails(): AccountDetails | undefined;
    setDetails(value?: AccountDetails): SignInRequest;
    getInvitationCode(): string;
    setInvitationCode(value: string): SignInRequest;
    getEcosystemId(): string;
    setEcosystemId(value: string): SignInRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SignInRequest.AsObject;
    static toObject(includeInstance: boolean, msg: SignInRequest): SignInRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SignInRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SignInRequest;
    static deserializeBinaryFromReader(message: SignInRequest, reader: jspb.BinaryReader): SignInRequest;
}

export namespace SignInRequest {
    export type AsObject = {
        details?: AccountDetails.AsObject,
        invitationCode: string,
        ecosystemId: string,
    }
}

export class AccountDetails extends jspb.Message { 
    getName(): string;
    setName(value: string): AccountDetails;
    getEmail(): string;
    setEmail(value: string): AccountDetails;
    getSms(): string;
    setSms(value: string): AccountDetails;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): AccountDetails.AsObject;
    static toObject(includeInstance: boolean, msg: AccountDetails): AccountDetails.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: AccountDetails, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): AccountDetails;
    static deserializeBinaryFromReader(message: AccountDetails, reader: jspb.BinaryReader): AccountDetails;
}

export namespace AccountDetails {
    export type AsObject = {
        name: string,
        email: string,
        sms: string,
    }
}

export class SignInResponse extends jspb.Message { 
    getStatus(): services_common_v1_common_pb.ResponseStatus;
    setStatus(value: services_common_v1_common_pb.ResponseStatus): SignInResponse;
    getConfirmationMethod(): ConfirmationMethod;
    setConfirmationMethod(value: ConfirmationMethod): SignInResponse;

    hasProfile(): boolean;
    clearProfile(): void;
    getProfile(): AccountProfile | undefined;
    setProfile(value?: AccountProfile): SignInResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SignInResponse.AsObject;
    static toObject(includeInstance: boolean, msg: SignInResponse): SignInResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SignInResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SignInResponse;
    static deserializeBinaryFromReader(message: SignInResponse, reader: jspb.BinaryReader): SignInResponse;
}

export namespace SignInResponse {
    export type AsObject = {
        status: services_common_v1_common_pb.ResponseStatus,
        confirmationMethod: ConfirmationMethod,
        profile?: AccountProfile.AsObject,
    }
}

export class AccountProfile extends jspb.Message { 
    getProfileType(): string;
    setProfileType(value: string): AccountProfile;
    getAuthData(): Uint8Array | string;
    getAuthData_asU8(): Uint8Array;
    getAuthData_asB64(): string;
    setAuthData(value: Uint8Array | string): AccountProfile;
    getAuthToken(): Uint8Array | string;
    getAuthToken_asU8(): Uint8Array;
    getAuthToken_asB64(): string;
    setAuthToken(value: Uint8Array | string): AccountProfile;

    hasProtection(): boolean;
    clearProtection(): void;
    getProtection(): TokenProtection | undefined;
    setProtection(value?: TokenProtection): AccountProfile;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): AccountProfile.AsObject;
    static toObject(includeInstance: boolean, msg: AccountProfile): AccountProfile.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: AccountProfile, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): AccountProfile;
    static deserializeBinaryFromReader(message: AccountProfile, reader: jspb.BinaryReader): AccountProfile;
}

export namespace AccountProfile {
    export type AsObject = {
        profileType: string,
        authData: Uint8Array | string,
        authToken: Uint8Array | string,
        protection?: TokenProtection.AsObject,
    }
}

export class TokenProtection extends jspb.Message { 
    getEnabled(): boolean;
    setEnabled(value: boolean): TokenProtection;
    getMethod(): ConfirmationMethod;
    setMethod(value: ConfirmationMethod): TokenProtection;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): TokenProtection.AsObject;
    static toObject(includeInstance: boolean, msg: TokenProtection): TokenProtection.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: TokenProtection, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): TokenProtection;
    static deserializeBinaryFromReader(message: TokenProtection, reader: jspb.BinaryReader): TokenProtection;
}

export namespace TokenProtection {
    export type AsObject = {
        enabled: boolean,
        method: ConfirmationMethod,
    }
}

export class InfoRequest extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InfoRequest.AsObject;
    static toObject(includeInstance: boolean, msg: InfoRequest): InfoRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InfoRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InfoRequest;
    static deserializeBinaryFromReader(message: InfoRequest, reader: jspb.BinaryReader): InfoRequest;
}

export namespace InfoRequest {
    export type AsObject = {
    }
}

export class InfoResponse extends jspb.Message { 

    hasDetails(): boolean;
    clearDetails(): void;
    getDetails(): AccountDetails | undefined;
    setDetails(value?: AccountDetails): InfoResponse;
    clearEcosystemsList(): void;
    getEcosystemsList(): Array<AccountEcosystem>;
    setEcosystemsList(value: Array<AccountEcosystem>): InfoResponse;
    addEcosystems(value?: AccountEcosystem, index?: number): AccountEcosystem;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InfoResponse.AsObject;
    static toObject(includeInstance: boolean, msg: InfoResponse): InfoResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InfoResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InfoResponse;
    static deserializeBinaryFromReader(message: InfoResponse, reader: jspb.BinaryReader): InfoResponse;
}

export namespace InfoResponse {
    export type AsObject = {
        details?: AccountDetails.AsObject,
        ecosystemsList: Array<AccountEcosystem.AsObject>,
    }
}

export class ListDevicesRequest extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListDevicesRequest.AsObject;
    static toObject(includeInstance: boolean, msg: ListDevicesRequest): ListDevicesRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListDevicesRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListDevicesRequest;
    static deserializeBinaryFromReader(message: ListDevicesRequest, reader: jspb.BinaryReader): ListDevicesRequest;
}

export namespace ListDevicesRequest {
    export type AsObject = {
    }
}

export class ListDevicesResponse extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ListDevicesResponse.AsObject;
    static toObject(includeInstance: boolean, msg: ListDevicesResponse): ListDevicesResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ListDevicesResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ListDevicesResponse;
    static deserializeBinaryFromReader(message: ListDevicesResponse, reader: jspb.BinaryReader): ListDevicesResponse;
}

export namespace ListDevicesResponse {
    export type AsObject = {
    }
}

export class RevokeDeviceRequest extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RevokeDeviceRequest.AsObject;
    static toObject(includeInstance: boolean, msg: RevokeDeviceRequest): RevokeDeviceRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RevokeDeviceRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RevokeDeviceRequest;
    static deserializeBinaryFromReader(message: RevokeDeviceRequest, reader: jspb.BinaryReader): RevokeDeviceRequest;
}

export namespace RevokeDeviceRequest {
    export type AsObject = {
    }
}

export class RevokeDeviceResponse extends jspb.Message { 

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RevokeDeviceResponse.AsObject;
    static toObject(includeInstance: boolean, msg: RevokeDeviceResponse): RevokeDeviceResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RevokeDeviceResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RevokeDeviceResponse;
    static deserializeBinaryFromReader(message: RevokeDeviceResponse, reader: jspb.BinaryReader): RevokeDeviceResponse;
}

export namespace RevokeDeviceResponse {
    export type AsObject = {
    }
}

export class AccountEcosystem extends jspb.Message { 
    getId(): string;
    setId(value: string): AccountEcosystem;
    getName(): string;
    setName(value: string): AccountEcosystem;
    getDescription(): string;
    setDescription(value: string): AccountEcosystem;
    getUri(): string;
    setUri(value: string): AccountEcosystem;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): AccountEcosystem.AsObject;
    static toObject(includeInstance: boolean, msg: AccountEcosystem): AccountEcosystem.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: AccountEcosystem, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): AccountEcosystem;
    static deserializeBinaryFromReader(message: AccountEcosystem, reader: jspb.BinaryReader): AccountEcosystem;
}

export namespace AccountEcosystem {
    export type AsObject = {
        id: string,
        name: string,
        description: string,
        uri: string,
    }
}

export enum ConfirmationMethod {
    NONE = 0,
    EMAIL = 1,
    SMS = 2,
    CONNECTEDDEVICE = 3,
    OTHER = 10,
}
