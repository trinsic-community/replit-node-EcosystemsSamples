"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletService = void 0;
const ServiceBase_1 = __importDefault(require("./ServiceBase"));
const proto_1 = require("./proto");
class WalletService extends ServiceBase_1.default {
    walletClient;
    constructor(options) {
        super(options);
        this.walletClient = new proto_1.UniversalWalletClient(this.address, this.channelCredentials);
    }
    // must be authorized
    search(query = "SELECT * FROM c") {
        return new Promise(async (resolve, reject) => {
            let searchRequest = new proto_1.SearchRequest().setQuery(query);
            this.walletClient.search(searchRequest, await this.getMetadata(searchRequest), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    // must be authorized
    async insertItem(request) {
        return new Promise(async (resolve, reject) => {
            this.walletClient.insertItem(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    // must be authorized
    async getItem(request) {
        return new Promise(async (resolve, reject) => {
            this.walletClient.getItem(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    deleteItem(request) {
        return new Promise(async (resolve, reject) => {
            this.walletClient.deleteItem(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
}
exports.WalletService = WalletService;
//# sourceMappingURL=WalletService.js.map