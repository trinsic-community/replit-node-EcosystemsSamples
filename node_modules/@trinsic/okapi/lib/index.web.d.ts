import * as proto from "@trinsic/okapi-proto";
export * from "@trinsic/okapi-proto";
export declare class DIDKey {
  static generate(
    request: proto.GenerateKeyRequest
  ): Promise<proto.GenerateKeyResponse>;
  static resolve(request: proto.ResolveRequest): Promise<proto.ResolveResponse>;
}
export declare class DIDComm {
  static pack(request: proto.PackRequest): Promise<proto.PackResponse>;
  static unpack(request: proto.UnpackRequest): Promise<proto.UnpackResponse>;
  static sign(request: proto.SignRequest): Promise<proto.SignResponse>;
  static verify(request: proto.VerifyRequest): Promise<proto.VerifyResponse>;
}
export declare class LdProofs {
  static generate(
    request: proto.CreateProofRequest
  ): Promise<proto.CreateProofResponse>;
  static convert(
    request: proto.VerifyProofRequest
  ): Promise<proto.VerifyProofResponse>;
}
export declare class Oberon {
  static createKey(
    request: proto.CreateOberonKeyRequest
  ): Promise<proto.CreateOberonKeyResponse>;
  static createToken(
    request: proto.CreateOberonTokenRequest
  ): Promise<proto.CreateOberonTokenResponse>;
  static createProof(
    request: proto.CreateOberonProofRequest
  ): Promise<proto.CreateOberonProofResponse>;
  static verifyProof(
    request: proto.VerifyOberonProofRequest
  ): Promise<proto.VerifyOberonProofResponse>;
  static blindToken(
    request: proto.BlindOberonTokenRequest
  ): Promise<proto.BlindOberonTokenResponse>;
  static unblindToken(
    request: proto.UnBlindOberonTokenRequest
  ): Promise<proto.UnBlindOberonTokenResponse>;
}
export declare class Hashing {
  static blake3Hash(
    request: proto.Blake3HashRequest
  ): Promise<proto.Blake3HashResponse>;
  static blake3KeyedHash(
    request: proto.Blake3KeyedHashRequest
  ): Promise<proto.Blake3KeyedHashResponse>;
  static blake3DeriveKey(
    request: proto.Blake3DeriveKeyRequest
  ): Promise<proto.Blake3DeriveKeyResponse>;
  static sha256Hash(
    request: proto.SHA256HashRequest
  ): Promise<proto.SHA256HashResponse>;
}
