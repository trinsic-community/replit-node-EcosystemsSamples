// source: okapi/proofs/v1/proofs.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var okapi_keys_v1_keys_pb = require('../../../okapi/keys/v1/keys_pb.js');
goog.object.extend(proto, okapi_keys_v1_keys_pb);
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.okapi.proofs.v1.CreateProofRequest', null, global);
goog.exportSymbol('proto.okapi.proofs.v1.CreateProofResponse', null, global);
goog.exportSymbol('proto.okapi.proofs.v1.LdSuite', null, global);
goog.exportSymbol('proto.okapi.proofs.v1.VerifyProofRequest', null, global);
goog.exportSymbol('proto.okapi.proofs.v1.VerifyProofResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.okapi.proofs.v1.CreateProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.okapi.proofs.v1.CreateProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.okapi.proofs.v1.CreateProofRequest.displayName = 'proto.okapi.proofs.v1.CreateProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.okapi.proofs.v1.CreateProofResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.okapi.proofs.v1.CreateProofResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.okapi.proofs.v1.CreateProofResponse.displayName = 'proto.okapi.proofs.v1.CreateProofResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.okapi.proofs.v1.VerifyProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.okapi.proofs.v1.VerifyProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.okapi.proofs.v1.VerifyProofRequest.displayName = 'proto.okapi.proofs.v1.VerifyProofRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.okapi.proofs.v1.VerifyProofResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.okapi.proofs.v1.VerifyProofResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.okapi.proofs.v1.VerifyProofResponse.displayName = 'proto.okapi.proofs.v1.VerifyProofResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.okapi.proofs.v1.CreateProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.okapi.proofs.v1.CreateProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.okapi.proofs.v1.CreateProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.proofs.v1.CreateProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    document: (f = msg.getDocument()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    key: (f = msg.getKey()) && okapi_keys_v1_keys_pb.JsonWebKey.toObject(includeInstance, f),
    suite: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.okapi.proofs.v1.CreateProofRequest}
 */
proto.okapi.proofs.v1.CreateProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.okapi.proofs.v1.CreateProofRequest;
  return proto.okapi.proofs.v1.CreateProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.okapi.proofs.v1.CreateProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.okapi.proofs.v1.CreateProofRequest}
 */
proto.okapi.proofs.v1.CreateProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setDocument(value);
      break;
    case 3:
      var value = new okapi_keys_v1_keys_pb.JsonWebKey;
      reader.readMessage(value,okapi_keys_v1_keys_pb.JsonWebKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {!proto.okapi.proofs.v1.LdSuite} */ (reader.readEnum());
      msg.setSuite(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.okapi.proofs.v1.CreateProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.okapi.proofs.v1.CreateProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.okapi.proofs.v1.CreateProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.proofs.v1.CreateProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      okapi_keys_v1_keys_pb.JsonWebKey.serializeBinaryToWriter
    );
  }
  f = message.getSuite();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional google.protobuf.Struct document = 1;
 * @return {?proto.google.protobuf.Struct}
 */
proto.okapi.proofs.v1.CreateProofRequest.prototype.getDocument = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 1));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.okapi.proofs.v1.CreateProofRequest} returns this
*/
proto.okapi.proofs.v1.CreateProofRequest.prototype.setDocument = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.okapi.proofs.v1.CreateProofRequest} returns this
 */
proto.okapi.proofs.v1.CreateProofRequest.prototype.clearDocument = function() {
  return this.setDocument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.okapi.proofs.v1.CreateProofRequest.prototype.hasDocument = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional okapi.keys.v1.JsonWebKey key = 3;
 * @return {?proto.okapi.keys.v1.JsonWebKey}
 */
proto.okapi.proofs.v1.CreateProofRequest.prototype.getKey = function() {
  return /** @type{?proto.okapi.keys.v1.JsonWebKey} */ (
    jspb.Message.getWrapperField(this, okapi_keys_v1_keys_pb.JsonWebKey, 3));
};


/**
 * @param {?proto.okapi.keys.v1.JsonWebKey|undefined} value
 * @return {!proto.okapi.proofs.v1.CreateProofRequest} returns this
*/
proto.okapi.proofs.v1.CreateProofRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.okapi.proofs.v1.CreateProofRequest} returns this
 */
proto.okapi.proofs.v1.CreateProofRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.okapi.proofs.v1.CreateProofRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LdSuite suite = 4;
 * @return {!proto.okapi.proofs.v1.LdSuite}
 */
proto.okapi.proofs.v1.CreateProofRequest.prototype.getSuite = function() {
  return /** @type {!proto.okapi.proofs.v1.LdSuite} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.okapi.proofs.v1.LdSuite} value
 * @return {!proto.okapi.proofs.v1.CreateProofRequest} returns this
 */
proto.okapi.proofs.v1.CreateProofRequest.prototype.setSuite = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.okapi.proofs.v1.CreateProofResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.okapi.proofs.v1.CreateProofResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.okapi.proofs.v1.CreateProofResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.proofs.v1.CreateProofResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    signedDocument: (f = msg.getSignedDocument()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.okapi.proofs.v1.CreateProofResponse}
 */
proto.okapi.proofs.v1.CreateProofResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.okapi.proofs.v1.CreateProofResponse;
  return proto.okapi.proofs.v1.CreateProofResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.okapi.proofs.v1.CreateProofResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.okapi.proofs.v1.CreateProofResponse}
 */
proto.okapi.proofs.v1.CreateProofResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setSignedDocument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.okapi.proofs.v1.CreateProofResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.okapi.proofs.v1.CreateProofResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.okapi.proofs.v1.CreateProofResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.proofs.v1.CreateProofResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignedDocument();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Struct signed_document = 1;
 * @return {?proto.google.protobuf.Struct}
 */
proto.okapi.proofs.v1.CreateProofResponse.prototype.getSignedDocument = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 1));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.okapi.proofs.v1.CreateProofResponse} returns this
*/
proto.okapi.proofs.v1.CreateProofResponse.prototype.setSignedDocument = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.okapi.proofs.v1.CreateProofResponse} returns this
 */
proto.okapi.proofs.v1.CreateProofResponse.prototype.clearSignedDocument = function() {
  return this.setSignedDocument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.okapi.proofs.v1.CreateProofResponse.prototype.hasSignedDocument = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.okapi.proofs.v1.VerifyProofRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.okapi.proofs.v1.VerifyProofRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.okapi.proofs.v1.VerifyProofRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.proofs.v1.VerifyProofRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.okapi.proofs.v1.VerifyProofRequest}
 */
proto.okapi.proofs.v1.VerifyProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.okapi.proofs.v1.VerifyProofRequest;
  return proto.okapi.proofs.v1.VerifyProofRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.okapi.proofs.v1.VerifyProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.okapi.proofs.v1.VerifyProofRequest}
 */
proto.okapi.proofs.v1.VerifyProofRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.okapi.proofs.v1.VerifyProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.okapi.proofs.v1.VerifyProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.okapi.proofs.v1.VerifyProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.proofs.v1.VerifyProofRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.okapi.proofs.v1.VerifyProofResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.okapi.proofs.v1.VerifyProofResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.okapi.proofs.v1.VerifyProofResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.proofs.v1.VerifyProofResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.okapi.proofs.v1.VerifyProofResponse}
 */
proto.okapi.proofs.v1.VerifyProofResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.okapi.proofs.v1.VerifyProofResponse;
  return proto.okapi.proofs.v1.VerifyProofResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.okapi.proofs.v1.VerifyProofResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.okapi.proofs.v1.VerifyProofResponse}
 */
proto.okapi.proofs.v1.VerifyProofResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.okapi.proofs.v1.VerifyProofResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.okapi.proofs.v1.VerifyProofResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.okapi.proofs.v1.VerifyProofResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.okapi.proofs.v1.VerifyProofResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.okapi.proofs.v1.LdSuite = {
  LD_SUITE_UNSPECIFIED: 0,
  LD_SUITE_JCSED25519SIGNATURE2020: 1
};

goog.object.extend(exports, proto.okapi.proofs.v1);
