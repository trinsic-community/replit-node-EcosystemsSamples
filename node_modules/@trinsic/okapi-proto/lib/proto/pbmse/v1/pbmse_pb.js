// source: pbmse/v1/pbmse.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pbmse.v1.EncryptedMessage', null, global);
goog.exportSymbol('proto.pbmse.v1.EncryptionAlgorithm', null, global);
goog.exportSymbol('proto.pbmse.v1.EncryptionHeader', null, global);
goog.exportSymbol('proto.pbmse.v1.EncryptionMode', null, global);
goog.exportSymbol('proto.pbmse.v1.EncryptionRecipient', null, global);
goog.exportSymbol('proto.pbmse.v1.Signature', null, global);
goog.exportSymbol('proto.pbmse.v1.SignatureHeader', null, global);
goog.exportSymbol('proto.pbmse.v1.SignedMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pbmse.v1.SignedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pbmse.v1.SignedMessage.repeatedFields_, null);
};
goog.inherits(proto.pbmse.v1.SignedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pbmse.v1.SignedMessage.displayName = 'proto.pbmse.v1.SignedMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pbmse.v1.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pbmse.v1.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pbmse.v1.Signature.displayName = 'proto.pbmse.v1.Signature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pbmse.v1.SignatureHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pbmse.v1.SignatureHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pbmse.v1.SignatureHeader.displayName = 'proto.pbmse.v1.SignatureHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pbmse.v1.EncryptedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pbmse.v1.EncryptedMessage.repeatedFields_, null);
};
goog.inherits(proto.pbmse.v1.EncryptedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pbmse.v1.EncryptedMessage.displayName = 'proto.pbmse.v1.EncryptedMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pbmse.v1.EncryptionHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pbmse.v1.EncryptionHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pbmse.v1.EncryptionHeader.displayName = 'proto.pbmse.v1.EncryptionHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pbmse.v1.EncryptionRecipient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pbmse.v1.EncryptionRecipient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pbmse.v1.EncryptionRecipient.displayName = 'proto.pbmse.v1.EncryptionRecipient';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pbmse.v1.SignedMessage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pbmse.v1.SignedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.pbmse.v1.SignedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pbmse.v1.SignedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbmse.v1.SignedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: msg.getPayload_asB64(),
    signaturesList: jspb.Message.toObjectList(msg.getSignaturesList(),
    proto.pbmse.v1.Signature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pbmse.v1.SignedMessage}
 */
proto.pbmse.v1.SignedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pbmse.v1.SignedMessage;
  return proto.pbmse.v1.SignedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pbmse.v1.SignedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pbmse.v1.SignedMessage}
 */
proto.pbmse.v1.SignedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 2:
      var value = new proto.pbmse.v1.Signature;
      reader.readMessage(value,proto.pbmse.v1.Signature.deserializeBinaryFromReader);
      msg.addSignatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pbmse.v1.SignedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pbmse.v1.SignedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pbmse.v1.SignedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbmse.v1.SignedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pbmse.v1.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pbmse.v1.SignedMessage.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.pbmse.v1.SignedMessage.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.pbmse.v1.SignedMessage.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pbmse.v1.SignedMessage} returns this
 */
proto.pbmse.v1.SignedMessage.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Signature signatures = 2;
 * @return {!Array<!proto.pbmse.v1.Signature>}
 */
proto.pbmse.v1.SignedMessage.prototype.getSignaturesList = function() {
  return /** @type{!Array<!proto.pbmse.v1.Signature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pbmse.v1.Signature, 2));
};


/**
 * @param {!Array<!proto.pbmse.v1.Signature>} value
 * @return {!proto.pbmse.v1.SignedMessage} returns this
*/
proto.pbmse.v1.SignedMessage.prototype.setSignaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pbmse.v1.Signature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pbmse.v1.Signature}
 */
proto.pbmse.v1.SignedMessage.prototype.addSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pbmse.v1.Signature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pbmse.v1.SignedMessage} returns this
 */
proto.pbmse.v1.SignedMessage.prototype.clearSignaturesList = function() {
  return this.setSignaturesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pbmse.v1.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.pbmse.v1.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pbmse.v1.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbmse.v1.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: msg.getHeader_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pbmse.v1.Signature}
 */
proto.pbmse.v1.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pbmse.v1.Signature;
  return proto.pbmse.v1.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pbmse.v1.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pbmse.v1.Signature}
 */
proto.pbmse.v1.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeader(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pbmse.v1.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pbmse.v1.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pbmse.v1.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbmse.v1.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes header = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pbmse.v1.Signature.prototype.getHeader = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes header = 1;
 * This is a type-conversion wrapper around `getHeader()`
 * @return {string}
 */
proto.pbmse.v1.Signature.prototype.getHeader_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeader()));
};


/**
 * optional bytes header = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeader()`
 * @return {!Uint8Array}
 */
proto.pbmse.v1.Signature.prototype.getHeader_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeader()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pbmse.v1.Signature} returns this
 */
proto.pbmse.v1.Signature.prototype.setHeader = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.pbmse.v1.Signature.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.pbmse.v1.Signature.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.pbmse.v1.Signature.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pbmse.v1.Signature} returns this
 */
proto.pbmse.v1.Signature.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pbmse.v1.SignatureHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.pbmse.v1.SignatureHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pbmse.v1.SignatureHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbmse.v1.SignatureHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    algorithm: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keyId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pbmse.v1.SignatureHeader}
 */
proto.pbmse.v1.SignatureHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pbmse.v1.SignatureHeader;
  return proto.pbmse.v1.SignatureHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pbmse.v1.SignatureHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pbmse.v1.SignatureHeader}
 */
proto.pbmse.v1.SignatureHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlgorithm(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pbmse.v1.SignatureHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pbmse.v1.SignatureHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pbmse.v1.SignatureHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbmse.v1.SignatureHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlgorithm();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeyId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string algorithm = 1;
 * @return {string}
 */
proto.pbmse.v1.SignatureHeader.prototype.getAlgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pbmse.v1.SignatureHeader} returns this
 */
proto.pbmse.v1.SignatureHeader.prototype.setAlgorithm = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string key_id = 2;
 * @return {string}
 */
proto.pbmse.v1.SignatureHeader.prototype.getKeyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pbmse.v1.SignatureHeader} returns this
 */
proto.pbmse.v1.SignatureHeader.prototype.setKeyId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pbmse.v1.EncryptedMessage.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pbmse.v1.EncryptedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.pbmse.v1.EncryptedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pbmse.v1.EncryptedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbmse.v1.EncryptedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    iv: msg.getIv_asB64(),
    aad: msg.getAad_asB64(),
    ciphertext: msg.getCiphertext_asB64(),
    tag: msg.getTag_asB64(),
    recipientsList: jspb.Message.toObjectList(msg.getRecipientsList(),
    proto.pbmse.v1.EncryptionRecipient.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pbmse.v1.EncryptedMessage}
 */
proto.pbmse.v1.EncryptedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pbmse.v1.EncryptedMessage;
  return proto.pbmse.v1.EncryptedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pbmse.v1.EncryptedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pbmse.v1.EncryptedMessage}
 */
proto.pbmse.v1.EncryptedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIv(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAad(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCiphertext(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTag(value);
      break;
    case 5:
      var value = new proto.pbmse.v1.EncryptionRecipient;
      reader.readMessage(value,proto.pbmse.v1.EncryptionRecipient.deserializeBinaryFromReader);
      msg.addRecipients(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pbmse.v1.EncryptedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pbmse.v1.EncryptedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pbmse.v1.EncryptedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbmse.v1.EncryptedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIv_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAad_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCiphertext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTag_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getRecipientsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.pbmse.v1.EncryptionRecipient.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes iv = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pbmse.v1.EncryptedMessage.prototype.getIv = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes iv = 1;
 * This is a type-conversion wrapper around `getIv()`
 * @return {string}
 */
proto.pbmse.v1.EncryptedMessage.prototype.getIv_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIv()));
};


/**
 * optional bytes iv = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIv()`
 * @return {!Uint8Array}
 */
proto.pbmse.v1.EncryptedMessage.prototype.getIv_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIv()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pbmse.v1.EncryptedMessage} returns this
 */
proto.pbmse.v1.EncryptedMessage.prototype.setIv = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes aad = 2;
 * @return {!(string|Uint8Array)}
 */
proto.pbmse.v1.EncryptedMessage.prototype.getAad = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes aad = 2;
 * This is a type-conversion wrapper around `getAad()`
 * @return {string}
 */
proto.pbmse.v1.EncryptedMessage.prototype.getAad_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAad()));
};


/**
 * optional bytes aad = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAad()`
 * @return {!Uint8Array}
 */
proto.pbmse.v1.EncryptedMessage.prototype.getAad_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAad()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pbmse.v1.EncryptedMessage} returns this
 */
proto.pbmse.v1.EncryptedMessage.prototype.setAad = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes ciphertext = 3;
 * @return {!(string|Uint8Array)}
 */
proto.pbmse.v1.EncryptedMessage.prototype.getCiphertext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ciphertext = 3;
 * This is a type-conversion wrapper around `getCiphertext()`
 * @return {string}
 */
proto.pbmse.v1.EncryptedMessage.prototype.getCiphertext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCiphertext()));
};


/**
 * optional bytes ciphertext = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCiphertext()`
 * @return {!Uint8Array}
 */
proto.pbmse.v1.EncryptedMessage.prototype.getCiphertext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCiphertext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pbmse.v1.EncryptedMessage} returns this
 */
proto.pbmse.v1.EncryptedMessage.prototype.setCiphertext = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes tag = 4;
 * @return {!(string|Uint8Array)}
 */
proto.pbmse.v1.EncryptedMessage.prototype.getTag = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes tag = 4;
 * This is a type-conversion wrapper around `getTag()`
 * @return {string}
 */
proto.pbmse.v1.EncryptedMessage.prototype.getTag_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTag()));
};


/**
 * optional bytes tag = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTag()`
 * @return {!Uint8Array}
 */
proto.pbmse.v1.EncryptedMessage.prototype.getTag_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTag()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pbmse.v1.EncryptedMessage} returns this
 */
proto.pbmse.v1.EncryptedMessage.prototype.setTag = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated EncryptionRecipient recipients = 5;
 * @return {!Array<!proto.pbmse.v1.EncryptionRecipient>}
 */
proto.pbmse.v1.EncryptedMessage.prototype.getRecipientsList = function() {
  return /** @type{!Array<!proto.pbmse.v1.EncryptionRecipient>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pbmse.v1.EncryptionRecipient, 5));
};


/**
 * @param {!Array<!proto.pbmse.v1.EncryptionRecipient>} value
 * @return {!proto.pbmse.v1.EncryptedMessage} returns this
*/
proto.pbmse.v1.EncryptedMessage.prototype.setRecipientsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.pbmse.v1.EncryptionRecipient=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pbmse.v1.EncryptionRecipient}
 */
proto.pbmse.v1.EncryptedMessage.prototype.addRecipients = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.pbmse.v1.EncryptionRecipient, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pbmse.v1.EncryptedMessage} returns this
 */
proto.pbmse.v1.EncryptedMessage.prototype.clearRecipientsList = function() {
  return this.setRecipientsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pbmse.v1.EncryptionHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.pbmse.v1.EncryptionHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pbmse.v1.EncryptionHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbmse.v1.EncryptionHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    algorithm: jspb.Message.getFieldWithDefault(msg, 2, 0),
    keyId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    senderKeyId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pbmse.v1.EncryptionHeader}
 */
proto.pbmse.v1.EncryptionHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pbmse.v1.EncryptionHeader;
  return proto.pbmse.v1.EncryptionHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pbmse.v1.EncryptionHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pbmse.v1.EncryptionHeader}
 */
proto.pbmse.v1.EncryptionHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pbmse.v1.EncryptionMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = /** @type {!proto.pbmse.v1.EncryptionAlgorithm} */ (reader.readEnum());
      msg.setAlgorithm(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderKeyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pbmse.v1.EncryptionHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pbmse.v1.EncryptionHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pbmse.v1.EncryptionHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbmse.v1.EncryptionHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAlgorithm();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getKeyId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSenderKeyId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional EncryptionMode mode = 1;
 * @return {!proto.pbmse.v1.EncryptionMode}
 */
proto.pbmse.v1.EncryptionHeader.prototype.getMode = function() {
  return /** @type {!proto.pbmse.v1.EncryptionMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pbmse.v1.EncryptionMode} value
 * @return {!proto.pbmse.v1.EncryptionHeader} returns this
 */
proto.pbmse.v1.EncryptionHeader.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional EncryptionAlgorithm algorithm = 2;
 * @return {!proto.pbmse.v1.EncryptionAlgorithm}
 */
proto.pbmse.v1.EncryptionHeader.prototype.getAlgorithm = function() {
  return /** @type {!proto.pbmse.v1.EncryptionAlgorithm} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.pbmse.v1.EncryptionAlgorithm} value
 * @return {!proto.pbmse.v1.EncryptionHeader} returns this
 */
proto.pbmse.v1.EncryptionHeader.prototype.setAlgorithm = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string key_id = 3;
 * @return {string}
 */
proto.pbmse.v1.EncryptionHeader.prototype.getKeyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pbmse.v1.EncryptionHeader} returns this
 */
proto.pbmse.v1.EncryptionHeader.prototype.setKeyId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string sender_key_id = 4;
 * @return {string}
 */
proto.pbmse.v1.EncryptionHeader.prototype.getSenderKeyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pbmse.v1.EncryptionHeader} returns this
 */
proto.pbmse.v1.EncryptionHeader.prototype.setSenderKeyId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pbmse.v1.EncryptionRecipient.prototype.toObject = function(opt_includeInstance) {
  return proto.pbmse.v1.EncryptionRecipient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pbmse.v1.EncryptionRecipient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbmse.v1.EncryptionRecipient.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.pbmse.v1.EncryptionHeader.toObject(includeInstance, f),
    contentEncryptionKey: msg.getContentEncryptionKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pbmse.v1.EncryptionRecipient}
 */
proto.pbmse.v1.EncryptionRecipient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pbmse.v1.EncryptionRecipient;
  return proto.pbmse.v1.EncryptionRecipient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pbmse.v1.EncryptionRecipient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pbmse.v1.EncryptionRecipient}
 */
proto.pbmse.v1.EncryptionRecipient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pbmse.v1.EncryptionHeader;
      reader.readMessage(value,proto.pbmse.v1.EncryptionHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContentEncryptionKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pbmse.v1.EncryptionRecipient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pbmse.v1.EncryptionRecipient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pbmse.v1.EncryptionRecipient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbmse.v1.EncryptionRecipient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pbmse.v1.EncryptionHeader.serializeBinaryToWriter
    );
  }
  f = message.getContentEncryptionKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional EncryptionHeader header = 1;
 * @return {?proto.pbmse.v1.EncryptionHeader}
 */
proto.pbmse.v1.EncryptionRecipient.prototype.getHeader = function() {
  return /** @type{?proto.pbmse.v1.EncryptionHeader} */ (
    jspb.Message.getWrapperField(this, proto.pbmse.v1.EncryptionHeader, 1));
};


/**
 * @param {?proto.pbmse.v1.EncryptionHeader|undefined} value
 * @return {!proto.pbmse.v1.EncryptionRecipient} returns this
*/
proto.pbmse.v1.EncryptionRecipient.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pbmse.v1.EncryptionRecipient} returns this
 */
proto.pbmse.v1.EncryptionRecipient.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pbmse.v1.EncryptionRecipient.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes content_encryption_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.pbmse.v1.EncryptionRecipient.prototype.getContentEncryptionKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes content_encryption_key = 2;
 * This is a type-conversion wrapper around `getContentEncryptionKey()`
 * @return {string}
 */
proto.pbmse.v1.EncryptionRecipient.prototype.getContentEncryptionKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContentEncryptionKey()));
};


/**
 * optional bytes content_encryption_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContentEncryptionKey()`
 * @return {!Uint8Array}
 */
proto.pbmse.v1.EncryptionRecipient.prototype.getContentEncryptionKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContentEncryptionKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pbmse.v1.EncryptionRecipient} returns this
 */
proto.pbmse.v1.EncryptionRecipient.prototype.setContentEncryptionKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.pbmse.v1.EncryptionMode = {
  ENCRYPTION_MODE_UNSPECIFIED: 0,
  ENCRYPTION_MODE_DIRECT: 1,
  ENCRYPTION_MODE_CONTENT_ENCRYPTION_KEY: 2
};

/**
 * @enum {number}
 */
proto.pbmse.v1.EncryptionAlgorithm = {
  ENCRYPTION_ALGORITHM_UNSPECIFIED: 0,
  ENCRYPTION_ALGORITHM_XCHACHA20POLY1305: 1,
  ENCRYPTION_ALGORITHM_AES_GCM: 2
};

goog.object.extend(exports, proto.pbmse.v1);
