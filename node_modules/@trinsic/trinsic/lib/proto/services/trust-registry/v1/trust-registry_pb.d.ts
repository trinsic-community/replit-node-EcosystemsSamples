// package: services.trustregistry.v1
// file: services/trust-registry/v1/trust-registry.proto

/* tslint:disable */
/* eslint-disable */

import * as jspb from "google-protobuf";
import * as services_common_v1_common_pb from "../../../services/common/v1/common_pb";

export class AddFrameworkRequest extends jspb.Message { 

    hasGovernanceFramework(): boolean;
    clearGovernanceFramework(): void;
    getGovernanceFramework(): GovernanceFramework | undefined;
    setGovernanceFramework(value?: GovernanceFramework): AddFrameworkRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): AddFrameworkRequest.AsObject;
    static toObject(includeInstance: boolean, msg: AddFrameworkRequest): AddFrameworkRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: AddFrameworkRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): AddFrameworkRequest;
    static deserializeBinaryFromReader(message: AddFrameworkRequest, reader: jspb.BinaryReader): AddFrameworkRequest;
}

export namespace AddFrameworkRequest {
    export type AsObject = {
        governanceFramework?: GovernanceFramework.AsObject,
    }
}

export class AddFrameworkResponse extends jspb.Message { 
    getStatus(): services_common_v1_common_pb.ResponseStatus;
    setStatus(value: services_common_v1_common_pb.ResponseStatus): AddFrameworkResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): AddFrameworkResponse.AsObject;
    static toObject(includeInstance: boolean, msg: AddFrameworkResponse): AddFrameworkResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: AddFrameworkResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): AddFrameworkResponse;
    static deserializeBinaryFromReader(message: AddFrameworkResponse, reader: jspb.BinaryReader): AddFrameworkResponse;
}

export namespace AddFrameworkResponse {
    export type AsObject = {
        status: services_common_v1_common_pb.ResponseStatus,
    }
}

export class RemoveFrameworkRequest extends jspb.Message { 

    hasGovernanceFramework(): boolean;
    clearGovernanceFramework(): void;
    getGovernanceFramework(): GovernanceFramework | undefined;
    setGovernanceFramework(value?: GovernanceFramework): RemoveFrameworkRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RemoveFrameworkRequest.AsObject;
    static toObject(includeInstance: boolean, msg: RemoveFrameworkRequest): RemoveFrameworkRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RemoveFrameworkRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RemoveFrameworkRequest;
    static deserializeBinaryFromReader(message: RemoveFrameworkRequest, reader: jspb.BinaryReader): RemoveFrameworkRequest;
}

export namespace RemoveFrameworkRequest {
    export type AsObject = {
        governanceFramework?: GovernanceFramework.AsObject,
    }
}

export class RemoveFrameworkResponse extends jspb.Message { 
    getStatus(): services_common_v1_common_pb.ResponseStatus;
    setStatus(value: services_common_v1_common_pb.ResponseStatus): RemoveFrameworkResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RemoveFrameworkResponse.AsObject;
    static toObject(includeInstance: boolean, msg: RemoveFrameworkResponse): RemoveFrameworkResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RemoveFrameworkResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RemoveFrameworkResponse;
    static deserializeBinaryFromReader(message: RemoveFrameworkResponse, reader: jspb.BinaryReader): RemoveFrameworkResponse;
}

export namespace RemoveFrameworkResponse {
    export type AsObject = {
        status: services_common_v1_common_pb.ResponseStatus,
    }
}

export class SearchRegistryRequest extends jspb.Message { 
    getQuery(): string;
    setQuery(value: string): SearchRegistryRequest;
    getContinuationToken(): string;
    setContinuationToken(value: string): SearchRegistryRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchRegistryRequest.AsObject;
    static toObject(includeInstance: boolean, msg: SearchRegistryRequest): SearchRegistryRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchRegistryRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchRegistryRequest;
    static deserializeBinaryFromReader(message: SearchRegistryRequest, reader: jspb.BinaryReader): SearchRegistryRequest;
}

export namespace SearchRegistryRequest {
    export type AsObject = {
        query: string,
        continuationToken: string,
    }
}

export class SearchRegistryResponse extends jspb.Message { 
    getItemsJson(): string;
    setItemsJson(value: string): SearchRegistryResponse;
    getHasMore(): boolean;
    setHasMore(value: boolean): SearchRegistryResponse;
    getCount(): number;
    setCount(value: number): SearchRegistryResponse;
    getContinuationToken(): string;
    setContinuationToken(value: string): SearchRegistryResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): SearchRegistryResponse.AsObject;
    static toObject(includeInstance: boolean, msg: SearchRegistryResponse): SearchRegistryResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: SearchRegistryResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): SearchRegistryResponse;
    static deserializeBinaryFromReader(message: SearchRegistryResponse, reader: jspb.BinaryReader): SearchRegistryResponse;
}

export namespace SearchRegistryResponse {
    export type AsObject = {
        itemsJson: string,
        hasMore: boolean,
        count: number,
        continuationToken: string,
    }
}

export class GovernanceFramework extends jspb.Message { 
    getGovernanceFrameworkUri(): string;
    setGovernanceFrameworkUri(value: string): GovernanceFramework;
    getTrustRegistryUri(): string;
    setTrustRegistryUri(value: string): GovernanceFramework;
    getDescription(): string;
    setDescription(value: string): GovernanceFramework;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): GovernanceFramework.AsObject;
    static toObject(includeInstance: boolean, msg: GovernanceFramework): GovernanceFramework.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: GovernanceFramework, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): GovernanceFramework;
    static deserializeBinaryFromReader(message: GovernanceFramework, reader: jspb.BinaryReader): GovernanceFramework;
}

export namespace GovernanceFramework {
    export type AsObject = {
        governanceFrameworkUri: string,
        trustRegistryUri: string,
        description: string,
    }
}

export class RegisterIssuerRequest extends jspb.Message { 

    hasDidUri(): boolean;
    clearDidUri(): void;
    getDidUri(): string;
    setDidUri(value: string): RegisterIssuerRequest;

    hasX509Cert(): boolean;
    clearX509Cert(): void;
    getX509Cert(): string;
    setX509Cert(value: string): RegisterIssuerRequest;
    getCredentialTypeUri(): string;
    setCredentialTypeUri(value: string): RegisterIssuerRequest;
    getValidFromUtc(): number;
    setValidFromUtc(value: number): RegisterIssuerRequest;
    getValidUntilUtc(): number;
    setValidUntilUtc(value: number): RegisterIssuerRequest;
    getGovernanceFrameworkUri(): string;
    setGovernanceFrameworkUri(value: string): RegisterIssuerRequest;

    getAuthorityCase(): RegisterIssuerRequest.AuthorityCase;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RegisterIssuerRequest.AsObject;
    static toObject(includeInstance: boolean, msg: RegisterIssuerRequest): RegisterIssuerRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RegisterIssuerRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RegisterIssuerRequest;
    static deserializeBinaryFromReader(message: RegisterIssuerRequest, reader: jspb.BinaryReader): RegisterIssuerRequest;
}

export namespace RegisterIssuerRequest {
    export type AsObject = {
        didUri: string,
        x509Cert: string,
        credentialTypeUri: string,
        validFromUtc: number,
        validUntilUtc: number,
        governanceFrameworkUri: string,
    }

    export enum AuthorityCase {
        AUTHORITY_NOT_SET = 0,
        DID_URI = 1,
        X509_CERT = 2,
    }

}

export class RegisterIssuerResponse extends jspb.Message { 
    getStatus(): services_common_v1_common_pb.ResponseStatus;
    setStatus(value: services_common_v1_common_pb.ResponseStatus): RegisterIssuerResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RegisterIssuerResponse.AsObject;
    static toObject(includeInstance: boolean, msg: RegisterIssuerResponse): RegisterIssuerResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RegisterIssuerResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RegisterIssuerResponse;
    static deserializeBinaryFromReader(message: RegisterIssuerResponse, reader: jspb.BinaryReader): RegisterIssuerResponse;
}

export namespace RegisterIssuerResponse {
    export type AsObject = {
        status: services_common_v1_common_pb.ResponseStatus,
    }
}

export class RegisterVerifierRequest extends jspb.Message { 

    hasDidUri(): boolean;
    clearDidUri(): void;
    getDidUri(): string;
    setDidUri(value: string): RegisterVerifierRequest;

    hasX509Cert(): boolean;
    clearX509Cert(): void;
    getX509Cert(): string;
    setX509Cert(value: string): RegisterVerifierRequest;
    getPresentationTypeUri(): string;
    setPresentationTypeUri(value: string): RegisterVerifierRequest;
    getValidFromUtc(): number;
    setValidFromUtc(value: number): RegisterVerifierRequest;
    getValidUntilUtc(): number;
    setValidUntilUtc(value: number): RegisterVerifierRequest;
    getGovernanceFrameworkUri(): string;
    setGovernanceFrameworkUri(value: string): RegisterVerifierRequest;

    getAuthorityCase(): RegisterVerifierRequest.AuthorityCase;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RegisterVerifierRequest.AsObject;
    static toObject(includeInstance: boolean, msg: RegisterVerifierRequest): RegisterVerifierRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RegisterVerifierRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RegisterVerifierRequest;
    static deserializeBinaryFromReader(message: RegisterVerifierRequest, reader: jspb.BinaryReader): RegisterVerifierRequest;
}

export namespace RegisterVerifierRequest {
    export type AsObject = {
        didUri: string,
        x509Cert: string,
        presentationTypeUri: string,
        validFromUtc: number,
        validUntilUtc: number,
        governanceFrameworkUri: string,
    }

    export enum AuthorityCase {
        AUTHORITY_NOT_SET = 0,
        DID_URI = 1,
        X509_CERT = 2,
    }

}

export class RegisterVerifierResponse extends jspb.Message { 
    getStatus(): services_common_v1_common_pb.ResponseStatus;
    setStatus(value: services_common_v1_common_pb.ResponseStatus): RegisterVerifierResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): RegisterVerifierResponse.AsObject;
    static toObject(includeInstance: boolean, msg: RegisterVerifierResponse): RegisterVerifierResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: RegisterVerifierResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): RegisterVerifierResponse;
    static deserializeBinaryFromReader(message: RegisterVerifierResponse, reader: jspb.BinaryReader): RegisterVerifierResponse;
}

export namespace RegisterVerifierResponse {
    export type AsObject = {
        status: services_common_v1_common_pb.ResponseStatus,
    }
}

export class UnregisterIssuerRequest extends jspb.Message { 

    hasDidUri(): boolean;
    clearDidUri(): void;
    getDidUri(): string;
    setDidUri(value: string): UnregisterIssuerRequest;

    hasX509Cert(): boolean;
    clearX509Cert(): void;
    getX509Cert(): string;
    setX509Cert(value: string): UnregisterIssuerRequest;
    getCredentialTypeUri(): string;
    setCredentialTypeUri(value: string): UnregisterIssuerRequest;
    getGovernanceFrameworkUri(): string;
    setGovernanceFrameworkUri(value: string): UnregisterIssuerRequest;

    getAuthorityCase(): UnregisterIssuerRequest.AuthorityCase;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UnregisterIssuerRequest.AsObject;
    static toObject(includeInstance: boolean, msg: UnregisterIssuerRequest): UnregisterIssuerRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UnregisterIssuerRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UnregisterIssuerRequest;
    static deserializeBinaryFromReader(message: UnregisterIssuerRequest, reader: jspb.BinaryReader): UnregisterIssuerRequest;
}

export namespace UnregisterIssuerRequest {
    export type AsObject = {
        didUri: string,
        x509Cert: string,
        credentialTypeUri: string,
        governanceFrameworkUri: string,
    }

    export enum AuthorityCase {
        AUTHORITY_NOT_SET = 0,
        DID_URI = 1,
        X509_CERT = 2,
    }

}

export class UnregisterIssuerResponse extends jspb.Message { 
    getStatus(): services_common_v1_common_pb.ResponseStatus;
    setStatus(value: services_common_v1_common_pb.ResponseStatus): UnregisterIssuerResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UnregisterIssuerResponse.AsObject;
    static toObject(includeInstance: boolean, msg: UnregisterIssuerResponse): UnregisterIssuerResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UnregisterIssuerResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UnregisterIssuerResponse;
    static deserializeBinaryFromReader(message: UnregisterIssuerResponse, reader: jspb.BinaryReader): UnregisterIssuerResponse;
}

export namespace UnregisterIssuerResponse {
    export type AsObject = {
        status: services_common_v1_common_pb.ResponseStatus,
    }
}

export class UnregisterVerifierRequest extends jspb.Message { 

    hasDidUri(): boolean;
    clearDidUri(): void;
    getDidUri(): string;
    setDidUri(value: string): UnregisterVerifierRequest;

    hasX509Cert(): boolean;
    clearX509Cert(): void;
    getX509Cert(): string;
    setX509Cert(value: string): UnregisterVerifierRequest;
    getPresentationTypeUri(): string;
    setPresentationTypeUri(value: string): UnregisterVerifierRequest;
    getGovernanceFrameworkUri(): string;
    setGovernanceFrameworkUri(value: string): UnregisterVerifierRequest;

    getAuthorityCase(): UnregisterVerifierRequest.AuthorityCase;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UnregisterVerifierRequest.AsObject;
    static toObject(includeInstance: boolean, msg: UnregisterVerifierRequest): UnregisterVerifierRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UnregisterVerifierRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UnregisterVerifierRequest;
    static deserializeBinaryFromReader(message: UnregisterVerifierRequest, reader: jspb.BinaryReader): UnregisterVerifierRequest;
}

export namespace UnregisterVerifierRequest {
    export type AsObject = {
        didUri: string,
        x509Cert: string,
        presentationTypeUri: string,
        governanceFrameworkUri: string,
    }

    export enum AuthorityCase {
        AUTHORITY_NOT_SET = 0,
        DID_URI = 1,
        X509_CERT = 2,
    }

}

export class UnregisterVerifierResponse extends jspb.Message { 
    getStatus(): services_common_v1_common_pb.ResponseStatus;
    setStatus(value: services_common_v1_common_pb.ResponseStatus): UnregisterVerifierResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): UnregisterVerifierResponse.AsObject;
    static toObject(includeInstance: boolean, msg: UnregisterVerifierResponse): UnregisterVerifierResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: UnregisterVerifierResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): UnregisterVerifierResponse;
    static deserializeBinaryFromReader(message: UnregisterVerifierResponse, reader: jspb.BinaryReader): UnregisterVerifierResponse;
}

export namespace UnregisterVerifierResponse {
    export type AsObject = {
        status: services_common_v1_common_pb.ResponseStatus,
    }
}

export class CheckIssuerStatusRequest extends jspb.Message { 
    getGovernanceFrameworkUri(): string;
    setGovernanceFrameworkUri(value: string): CheckIssuerStatusRequest;

    hasDidUri(): boolean;
    clearDidUri(): void;
    getDidUri(): string;
    setDidUri(value: string): CheckIssuerStatusRequest;

    hasX509Cert(): boolean;
    clearX509Cert(): void;
    getX509Cert(): string;
    setX509Cert(value: string): CheckIssuerStatusRequest;
    getCredentialTypeUri(): string;
    setCredentialTypeUri(value: string): CheckIssuerStatusRequest;

    getMemberCase(): CheckIssuerStatusRequest.MemberCase;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CheckIssuerStatusRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CheckIssuerStatusRequest): CheckIssuerStatusRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CheckIssuerStatusRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CheckIssuerStatusRequest;
    static deserializeBinaryFromReader(message: CheckIssuerStatusRequest, reader: jspb.BinaryReader): CheckIssuerStatusRequest;
}

export namespace CheckIssuerStatusRequest {
    export type AsObject = {
        governanceFrameworkUri: string,
        didUri: string,
        x509Cert: string,
        credentialTypeUri: string,
    }

    export enum MemberCase {
        MEMBER_NOT_SET = 0,
        DID_URI = 2,
        X509_CERT = 3,
    }

}

export class CheckIssuerStatusResponse extends jspb.Message { 
    getStatus(): RegistrationStatus;
    setStatus(value: RegistrationStatus): CheckIssuerStatusResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CheckIssuerStatusResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CheckIssuerStatusResponse): CheckIssuerStatusResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CheckIssuerStatusResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CheckIssuerStatusResponse;
    static deserializeBinaryFromReader(message: CheckIssuerStatusResponse, reader: jspb.BinaryReader): CheckIssuerStatusResponse;
}

export namespace CheckIssuerStatusResponse {
    export type AsObject = {
        status: RegistrationStatus,
    }
}

export class CheckVerifierStatusRequest extends jspb.Message { 
    getGovernanceFrameworkUri(): string;
    setGovernanceFrameworkUri(value: string): CheckVerifierStatusRequest;

    hasDidUri(): boolean;
    clearDidUri(): void;
    getDidUri(): string;
    setDidUri(value: string): CheckVerifierStatusRequest;

    hasX509Cert(): boolean;
    clearX509Cert(): void;
    getX509Cert(): string;
    setX509Cert(value: string): CheckVerifierStatusRequest;
    getPresentationTypeUri(): string;
    setPresentationTypeUri(value: string): CheckVerifierStatusRequest;

    getMemberCase(): CheckVerifierStatusRequest.MemberCase;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CheckVerifierStatusRequest.AsObject;
    static toObject(includeInstance: boolean, msg: CheckVerifierStatusRequest): CheckVerifierStatusRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CheckVerifierStatusRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CheckVerifierStatusRequest;
    static deserializeBinaryFromReader(message: CheckVerifierStatusRequest, reader: jspb.BinaryReader): CheckVerifierStatusRequest;
}

export namespace CheckVerifierStatusRequest {
    export type AsObject = {
        governanceFrameworkUri: string,
        didUri: string,
        x509Cert: string,
        presentationTypeUri: string,
    }

    export enum MemberCase {
        MEMBER_NOT_SET = 0,
        DID_URI = 2,
        X509_CERT = 3,
    }

}

export class CheckVerifierStatusResponse extends jspb.Message { 
    getStatus(): RegistrationStatus;
    setStatus(value: RegistrationStatus): CheckVerifierStatusResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): CheckVerifierStatusResponse.AsObject;
    static toObject(includeInstance: boolean, msg: CheckVerifierStatusResponse): CheckVerifierStatusResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: CheckVerifierStatusResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): CheckVerifierStatusResponse;
    static deserializeBinaryFromReader(message: CheckVerifierStatusResponse, reader: jspb.BinaryReader): CheckVerifierStatusResponse;
}

export namespace CheckVerifierStatusResponse {
    export type AsObject = {
        status: RegistrationStatus,
    }
}

export class FetchDataRequest extends jspb.Message { 
    getGovernanceFrameworkUri(): string;
    setGovernanceFrameworkUri(value: string): FetchDataRequest;
    getQuery(): string;
    setQuery(value: string): FetchDataRequest;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): FetchDataRequest.AsObject;
    static toObject(includeInstance: boolean, msg: FetchDataRequest): FetchDataRequest.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: FetchDataRequest, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): FetchDataRequest;
    static deserializeBinaryFromReader(message: FetchDataRequest, reader: jspb.BinaryReader): FetchDataRequest;
}

export namespace FetchDataRequest {
    export type AsObject = {
        governanceFrameworkUri: string,
        query: string,
    }
}

export class FetchDataResponse extends jspb.Message { 
    getResponseJson(): string;
    setResponseJson(value: string): FetchDataResponse;
    getHasMoreResults(): boolean;
    setHasMoreResults(value: boolean): FetchDataResponse;
    getContinuationToken(): string;
    setContinuationToken(value: string): FetchDataResponse;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): FetchDataResponse.AsObject;
    static toObject(includeInstance: boolean, msg: FetchDataResponse): FetchDataResponse.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: FetchDataResponse, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): FetchDataResponse;
    static deserializeBinaryFromReader(message: FetchDataResponse, reader: jspb.BinaryReader): FetchDataResponse;
}

export namespace FetchDataResponse {
    export type AsObject = {
        responseJson: string,
        hasMoreResults: boolean,
        continuationToken: string,
    }
}

export enum RegistrationStatus {
    CURRENT = 0,
    EXPIRED = 1,
    TERMINATED = 2,
    REVOKED = 3,
    NOT_FOUND = 10,
}
