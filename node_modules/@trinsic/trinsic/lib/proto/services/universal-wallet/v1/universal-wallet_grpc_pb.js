// GENERATED CODE -- DO NOT EDIT!

'use strict';
var grpc = require('@grpc/grpc-js');
var services_universal$wallet_v1_universal$wallet_pb = require('../../../services/universal-wallet/v1/universal-wallet_pb.js');
var services_common_v1_common_pb = require('../../../services/common/v1/common_pb.js');

function serialize_services_universalwallet_v1_DeleteItemRequest(arg) {
  if (!(arg instanceof services_universal$wallet_v1_universal$wallet_pb.DeleteItemRequest)) {
    throw new Error('Expected argument of type services.universalwallet.v1.DeleteItemRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_universalwallet_v1_DeleteItemRequest(buffer_arg) {
  return services_universal$wallet_v1_universal$wallet_pb.DeleteItemRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_universalwallet_v1_DeleteItemResponse(arg) {
  if (!(arg instanceof services_universal$wallet_v1_universal$wallet_pb.DeleteItemResponse)) {
    throw new Error('Expected argument of type services.universalwallet.v1.DeleteItemResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_universalwallet_v1_DeleteItemResponse(buffer_arg) {
  return services_universal$wallet_v1_universal$wallet_pb.DeleteItemResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_universalwallet_v1_GetItemRequest(arg) {
  if (!(arg instanceof services_universal$wallet_v1_universal$wallet_pb.GetItemRequest)) {
    throw new Error('Expected argument of type services.universalwallet.v1.GetItemRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_universalwallet_v1_GetItemRequest(buffer_arg) {
  return services_universal$wallet_v1_universal$wallet_pb.GetItemRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_universalwallet_v1_GetItemResponse(arg) {
  if (!(arg instanceof services_universal$wallet_v1_universal$wallet_pb.GetItemResponse)) {
    throw new Error('Expected argument of type services.universalwallet.v1.GetItemResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_universalwallet_v1_GetItemResponse(buffer_arg) {
  return services_universal$wallet_v1_universal$wallet_pb.GetItemResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_universalwallet_v1_InsertItemRequest(arg) {
  if (!(arg instanceof services_universal$wallet_v1_universal$wallet_pb.InsertItemRequest)) {
    throw new Error('Expected argument of type services.universalwallet.v1.InsertItemRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_universalwallet_v1_InsertItemRequest(buffer_arg) {
  return services_universal$wallet_v1_universal$wallet_pb.InsertItemRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_universalwallet_v1_InsertItemResponse(arg) {
  if (!(arg instanceof services_universal$wallet_v1_universal$wallet_pb.InsertItemResponse)) {
    throw new Error('Expected argument of type services.universalwallet.v1.InsertItemResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_universalwallet_v1_InsertItemResponse(buffer_arg) {
  return services_universal$wallet_v1_universal$wallet_pb.InsertItemResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_universalwallet_v1_SearchRequest(arg) {
  if (!(arg instanceof services_universal$wallet_v1_universal$wallet_pb.SearchRequest)) {
    throw new Error('Expected argument of type services.universalwallet.v1.SearchRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_universalwallet_v1_SearchRequest(buffer_arg) {
  return services_universal$wallet_v1_universal$wallet_pb.SearchRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_universalwallet_v1_SearchResponse(arg) {
  if (!(arg instanceof services_universal$wallet_v1_universal$wallet_pb.SearchResponse)) {
    throw new Error('Expected argument of type services.universalwallet.v1.SearchResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_universalwallet_v1_SearchResponse(buffer_arg) {
  return services_universal$wallet_v1_universal$wallet_pb.SearchResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_universalwallet_v1_UpdateItemRequest(arg) {
  if (!(arg instanceof services_universal$wallet_v1_universal$wallet_pb.UpdateItemRequest)) {
    throw new Error('Expected argument of type services.universalwallet.v1.UpdateItemRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_universalwallet_v1_UpdateItemRequest(buffer_arg) {
  return services_universal$wallet_v1_universal$wallet_pb.UpdateItemRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_services_universalwallet_v1_UpdateItemResponse(arg) {
  if (!(arg instanceof services_universal$wallet_v1_universal$wallet_pb.UpdateItemResponse)) {
    throw new Error('Expected argument of type services.universalwallet.v1.UpdateItemResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_services_universalwallet_v1_UpdateItemResponse(buffer_arg) {
  return services_universal$wallet_v1_universal$wallet_pb.UpdateItemResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


var UniversalWalletService = exports.UniversalWalletService = {
  // Retrieve an item from the wallet with a given item identifier
getItem: {
    path: '/services.universalwallet.v1.UniversalWallet/GetItem',
    requestStream: false,
    responseStream: false,
    requestType: services_universal$wallet_v1_universal$wallet_pb.GetItemRequest,
    responseType: services_universal$wallet_v1_universal$wallet_pb.GetItemResponse,
    requestSerialize: serialize_services_universalwallet_v1_GetItemRequest,
    requestDeserialize: deserialize_services_universalwallet_v1_GetItemRequest,
    responseSerialize: serialize_services_universalwallet_v1_GetItemResponse,
    responseDeserialize: deserialize_services_universalwallet_v1_GetItemResponse,
  },
  // Search the wallet using a SQL-like syntax
search: {
    path: '/services.universalwallet.v1.UniversalWallet/Search',
    requestStream: false,
    responseStream: false,
    requestType: services_universal$wallet_v1_universal$wallet_pb.SearchRequest,
    responseType: services_universal$wallet_v1_universal$wallet_pb.SearchResponse,
    requestSerialize: serialize_services_universalwallet_v1_SearchRequest,
    requestDeserialize: deserialize_services_universalwallet_v1_SearchRequest,
    responseSerialize: serialize_services_universalwallet_v1_SearchResponse,
    responseDeserialize: deserialize_services_universalwallet_v1_SearchResponse,
  },
  // Insert an item into the wallet
insertItem: {
    path: '/services.universalwallet.v1.UniversalWallet/InsertItem',
    requestStream: false,
    responseStream: false,
    requestType: services_universal$wallet_v1_universal$wallet_pb.InsertItemRequest,
    responseType: services_universal$wallet_v1_universal$wallet_pb.InsertItemResponse,
    requestSerialize: serialize_services_universalwallet_v1_InsertItemRequest,
    requestDeserialize: deserialize_services_universalwallet_v1_InsertItemRequest,
    responseSerialize: serialize_services_universalwallet_v1_InsertItemResponse,
    responseDeserialize: deserialize_services_universalwallet_v1_InsertItemResponse,
  },
  // Insert an item into the wallet
updateItem: {
    path: '/services.universalwallet.v1.UniversalWallet/UpdateItem',
    requestStream: false,
    responseStream: false,
    requestType: services_universal$wallet_v1_universal$wallet_pb.UpdateItemRequest,
    responseType: services_universal$wallet_v1_universal$wallet_pb.UpdateItemResponse,
    requestSerialize: serialize_services_universalwallet_v1_UpdateItemRequest,
    requestDeserialize: deserialize_services_universalwallet_v1_UpdateItemRequest,
    responseSerialize: serialize_services_universalwallet_v1_UpdateItemResponse,
    responseDeserialize: deserialize_services_universalwallet_v1_UpdateItemResponse,
  },
  // Delete an item from the wallet permanently
deleteItem: {
    path: '/services.universalwallet.v1.UniversalWallet/DeleteItem',
    requestStream: false,
    responseStream: false,
    requestType: services_universal$wallet_v1_universal$wallet_pb.DeleteItemRequest,
    responseType: services_universal$wallet_v1_universal$wallet_pb.DeleteItemResponse,
    requestSerialize: serialize_services_universalwallet_v1_DeleteItemRequest,
    requestDeserialize: deserialize_services_universalwallet_v1_DeleteItemRequest,
    responseSerialize: serialize_services_universalwallet_v1_DeleteItemResponse,
    responseDeserialize: deserialize_services_universalwallet_v1_DeleteItemResponse,
  },
};

exports.UniversalWalletClient = grpc.makeGenericClientConstructor(UniversalWalletService);
