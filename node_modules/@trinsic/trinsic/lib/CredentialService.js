"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialService = void 0;
const ServiceBase_1 = __importDefault(require("./ServiceBase"));
const verifiable_credentials_grpc_pb_1 = require("./proto/services/verifiable-credentials/v1/verifiable-credentials_grpc_pb");
class CredentialService extends ServiceBase_1.default {
    credentialClient;
    constructor(options) {
        super(options);
        this.credentialClient = new verifiable_credentials_grpc_pb_1.VerifiableCredentialClient(this.address, this.channelCredentials);
    }
    issueCredential(request) {
        return new Promise(async (resolve, reject) => {
            this.credentialClient.issue(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    issueFromTemplate(request) {
        return new Promise(async (resolve, reject) => {
            this.credentialClient.issueFromTemplate(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    createProof(request) {
        return new Promise(async (resolve, reject) => {
            this.credentialClient.createProof(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    verifyProof(request) {
        return new Promise(async (resolve, reject) => {
            this.credentialClient.verifyProof(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    checkStatus(request) {
        return new Promise(async (resolve, reject) => {
            this.credentialClient.checkStatus(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    updateStatus(request) {
        return new Promise(async (resolve, reject) => {
            this.credentialClient.updateStatus(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
    send(request) {
        return new Promise(async (resolve, reject) => {
            this.credentialClient.send(request, await this.getMetadata(request), (error, response) => {
                if (error) {
                    reject(error);
                }
                else {
                    resolve(response);
                }
            });
        });
    }
}
exports.CredentialService = CredentialService;
//# sourceMappingURL=CredentialService.js.map